2019-07-10 14:33:47.384900: Systems Information:
2019-07-10 14:33:47.385254: 
2019-07-10 14:33:47.385261: Clickhouse Instance: 192.168.5.60:9000
2019-07-10 14:33:47.385472: 
2019-07-10 14:33:47.385478: Cassandra Instance: dev-cassandra.ksg.int:9042
2019-07-10 14:33:47.385629: 
2019-07-10 14:33:47.385635: Clickhouse Table Definition:
2019-07-10 14:33:47.385635: CREATE TABLE radius.udr ( 
2019-07-10 14:33:47.385635:    CreateDate DateTime default now(), 
2019-07-10 14:33:47.385635:    Message String 
2019-07-10 14:33:47.385635: ) ENGINE = MergeTree() 
2019-07-10 14:33:47.385635: PARTITION BY toYYYYMM(CreateDate) 
2019-07-10 14:33:47.385635: ORDER BY tuple()
2019-07-10 14:33:47.386266: 
2019-07-10 14:33:47.386272: Cassandra Table Definition:
2019-07-10 14:33:47.386272: CREATE TABLE "CassandraPractice".udr_copy1 (
2019-07-10 14:33:47.386272: 	partitionhash int,
2019-07-10 14:33:47.386272: 	hashcode text,
2019-07-10 14:33:47.386272: 	accountnumber text,
2019-07-10 14:33:47.386272: 	airtimeclass int,
2019-07-10 14:33:47.386272: 	airtimeunits double,
2019-07-10 14:33:47.386272: 	allocationcompletedate text,
2019-07-10 14:33:47.386272: 	apn text,
2019-07-10 14:33:47.386272: 	callednumber text,
2019-07-10 14:33:47.386272: 	callingnumber text,
2019-07-10 14:33:47.386272: 	carrierid int,
2019-07-10 14:33:47.386272: 	cellid text,
2019-07-10 14:33:47.386272: 	chargingid text,
2019-07-10 14:33:47.386272: 	costcenterid int,
2019-07-10 14:33:47.386272: 	downlinkvol bigint,
2019-07-10 14:33:47.386272: 	duration double,
2019-07-10 14:33:47.386272: 	exactusagedateonly date,
2019-07-10 14:33:47.386272: 	exactusagetime text,
2019-07-10 14:33:47.386272: 	fileid int,
2019-07-10 14:33:47.386272: 	iccid text,
2019-07-10 14:33:47.386272: 	imei text,
2019-07-10 14:33:47.386272: 	imsi text,
2019-07-10 14:33:47.386272: 	lineid bigint,
2019-07-10 14:33:47.386272: 	linenumber int,
2019-07-10 14:33:47.386272: 	mobilecountrycode text,
2019-07-10 14:33:47.386272: 	mobilenetworkcode text,
2019-07-10 14:33:47.386272: 	mobileoriginated boolean,
2019-07-10 14:33:47.386272: 	msisdn text,
2019-07-10 14:33:47.386272: 	network text,
2019-07-10 14:33:47.386272: 	orgid int,
2019-07-10 14:33:47.386272: 	orgurn text,
2019-07-10 14:33:47.386272: 	plmn text,
2019-07-10 14:33:47.386272: 	propertybag MAP<text, text>,
2019-07-10 14:33:47.386272: 	recordtype text,
2019-07-10 14:33:47.386272: 	roamingindicator text,
2019-07-10 14:33:47.386272: 	roundingdate text,
2019-07-10 14:33:47.386272: 	sender text,
2019-07-10 14:33:47.386272: 	subscriptionid int,
2019-07-10 14:33:47.386272: 	subscriptionurn text,
2019-07-10 14:33:47.386272: 	surrecordtypeid int,
2019-07-10 14:33:47.386272: 	tapcode text,
2019-07-10 14:33:47.386272: 	uplinkvol bigint,
2019-07-10 14:33:47.386272: 	usagetypeid int,
2019-07-10 14:33:47.386272: 	PRIMARY KEY (partitionhash, hashcode)
2019-07-10 14:33:47.386272: ) WITH bloom_filter_fp_chance = 0.01
2019-07-10 14:33:47.386272: AND comment = ''
2019-07-10 14:33:47.386272: AND crc_check_chance = 1.0
2019-07-10 14:33:47.386272: AND dclocal_read_repair_chance = 0.1
2019-07-10 14:33:47.386272: AND default_time_to_live = 0
2019-07-10 14:33:47.386272: AND gc_grace_seconds = 864000
2019-07-10 14:33:47.386272: AND max_index_interval = 2048
2019-07-10 14:33:47.386272: AND memtable_flush_period_in_ms = 0
2019-07-10 14:33:47.386272: AND min_index_interval = 128
2019-07-10 14:33:47.386272: AND read_repair_chance = 0.0
2019-07-10 14:33:47.386272: AND speculative_retry = '99.0PERCENTILE'
2019-07-10 14:33:47.386272: AND caching = {
2019-07-10 14:33:47.386272: 	'keys' : 'NONE',
2019-07-10 14:33:47.386272: 	'rows_per_partition' : 'NONE'
2019-07-10 14:33:47.386272: }
2019-07-10 14:33:47.386272: AND compression = {
2019-07-10 14:33:47.386272: 	'chunk_length_in_kb' : 64,
2019-07-10 14:33:47.386272: 	'class' : 'LZ4Compressor',
2019-07-10 14:33:47.386272: 	'enabled' : true
2019-07-10 14:33:47.386272: }
2019-07-10 14:33:47.386272: AND compaction = {
2019-07-10 14:33:47.386272: 	'class' : 'SizeTieredCompactionStrategy',
2019-07-10 14:33:47.386272: 	'max_threshold' : 32,
2019-07-10 14:33:47.386272: 	'min_threshold' : 4
2019-07-10 14:33:47.386272: };
2019-07-10 14:33:47.391065: 
2019-07-10 14:33:47.391072: 
2019-07-10 14:33:47.391367: Beginning Clickhouse Test
2019-07-10 14:33:47.439326: Thread 139936588891904 starting
2019-07-10 14:33:47.439953: Thread 139936588891904 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 14:33:48.440227: Thread 139936630900480 starting
2019-07-10 14:33:48.441116: Thread 139936630900480 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 14:33:49.441422: Thread 139936639354624 starting
2019-07-10 14:33:49.442543: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 14:33:50.442606: Thread 139936327468800 starting
2019-07-10 14:33:50.443712: Thread 139936327468800 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 14:33:51.442820: 
2019-07-10 14:33:51.442859: Current Query: SELECT visitParamExtractInt(Message, 'partitionhash') AS partitionhash, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'hashcode') AS hashcode, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'accountnumber') AS accountnumber, 
2019-07-10 14:33:51.442859: visitParamExtractInt(Message, 'airtimeclass') AS airtimeclass, 
2019-07-10 14:33:51.442859: visitParamExtractFloat(Message, 'airtimeunits') AS airtimeunits, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'allocationcompletedate') AS allocationcompletedate, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'apn') AS apn, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'callednumber') AS callednumber, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'callingnumber') AS callingnumber, 
2019-07-10 14:33:51.442859: visitParamExtractInt(Message, 'carrierid') AS carrierid, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'cellid') AS cellid, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'chargingid') AS chargingid, 
2019-07-10 14:33:51.442859: visitParamExtractInt(Message, 'costcenterid') AS costcenterid, 
2019-07-10 14:33:51.442859: visitParamExtractInt(Message, 'downlinkvol') AS downlinkvol, 
2019-07-10 14:33:51.442859: visitParamExtractFloat(Message, 'duration') AS duration, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'exactusagedateonly') AS exactusagedateonly, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'exactusagetime') AS exactusagetime, 
2019-07-10 14:33:51.442859: visitParamExtractInt(Message, 'fileid') AS fileid, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'iccid') AS iccid, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'imei') AS imei, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'imsi') AS imsi, 
2019-07-10 14:33:51.442859: visitParamExtractInt(Message, 'lineid') AS lineid, 
2019-07-10 14:33:51.442859: visitParamExtractInt(Message, 'linenumber') AS linenumber, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'mobilecountrycode') AS mobilecountrycode, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'mobilenetworkcode') AS mobilenetworkcode, 
2019-07-10 14:33:51.442859: visitParamExtractBool(Message, 'mobileoriginated') AS mobileoriginated, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'msisdn') AS msisdn, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'network') AS network, 
2019-07-10 14:33:51.442859: visitParamExtractInt(Message, 'orgid') AS orgid, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'orgurn') AS orgurn, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'plmn') AS plmn, 
2019-07-10 14:33:51.442859: visitParamExtractRaw(Message, 'propertybag') AS propertybag, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'recordtype') AS recordtype, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'roamingindicator') AS roamingindicator, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'roundingdate') AS roundingdate, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'sender') AS sender, 
2019-07-10 14:33:51.442859: visitParamExtractInt(Message, 'subscriptionid') AS subscriptionid, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'subscriptionurn') AS subscriptionurn, 
2019-07-10 14:33:51.442859: visitParamExtractInt(Message, 'surrecordtypeid') AS surrecordtypeid, 
2019-07-10 14:33:51.442859: visitParamExtractString(Message, 'tapcode') AS tapcode, 
2019-07-10 14:33:51.442859: visitParamExtractInt(Message, 'uplinkvol') AS uplinkvol, 
2019-07-10 14:33:51.442859: visitParamExtractInt(Message, 'usagetypeid') AS usagetypeid 
2019-07-10 14:33:51.442859: FROM radius.udr 
2019-07-10 14:33:51.442859: LIMIT 
2019-07-10 14:34:51.478898: Iteration 0: 0.05
2019-07-10 14:35:19.513733: Thread 139936327468800 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 14:35:26.668725: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 14:35:52.494946: Iteration 1: 0.04
2019-07-10 14:36:30.539041: Thread 139936630900480 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 14:36:47.638699: Thread 139936327468800 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 14:36:50.500455: Iteration 2: 0.02
2019-07-10 14:37:19.411005: Thread 139936588891904 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 14:37:27.181492: Thread 139936588891904 encountered an exception:
2019-07-10 14:37:27.182520: Code: 241.
2019-07-10 14:37:27.182576: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 14:37:27.182576: 
2019-07-10 14:37:27.182576: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 14:37:27.182576: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 14:37:27.182576: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 14:37:27.182576: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 14:37:27.182576: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 14:37:27.182576: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 14:37:27.182576: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 14:37:27.182576: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 14:37:27.182576: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 14:37:27.182576: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 14:37:27.182576: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 14:37:27.182576: 11. clickhouse-server() [0x71eee5f]
2019-07-10 14:37:27.182576: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 14:37:27.182576: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 14:37:27.182576: 
2019-07-10 14:37:31.027097: Thread 139936630900480 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 14:37:32.189376: Continuing after exception
2019-07-10 14:37:32.190437: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 14:37:38.619125: Thread 139936630900480 encountered an exception:
2019-07-10 14:37:38.620142: Code: 241.
2019-07-10 14:37:38.620230: DB::Exception: Memory limit (for query) exceeded: would use 9.38 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 14:37:38.620230: 
2019-07-10 14:37:38.620230: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 14:37:38.620230: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 14:37:38.620230: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 14:37:38.620230: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 14:37:38.620230: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 14:37:38.620230: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 14:37:38.620230: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 14:37:38.620230: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 14:37:38.620230: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 14:37:38.620230: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 14:37:38.620230: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 14:37:38.620230: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 14:37:38.620230: 12. clickhouse-server() [0x71eee5f]
2019-07-10 14:37:38.620230: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 14:37:38.620230: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 14:37:38.620230: 
2019-07-10 14:37:43.633196: Continuing after exception
2019-07-10 14:37:43.634108: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 14:37:49.545613: Iteration 3: 0.06
2019-07-10 14:38:18.496930: Thread 139936588891904 encountered an exception:
2019-07-10 14:38:18.497945: Code: 241.
2019-07-10 14:38:18.497996: DB::Exception: Memory limit (for query) exceeded: would use 9.42 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 14:38:18.497996: 
2019-07-10 14:38:18.497996: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 14:38:18.497996: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 14:38:18.497996: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 14:38:18.497996: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 14:38:18.497996: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 14:38:18.497996: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 14:38:18.497996: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 14:38:18.497996: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 14:38:18.497996: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 14:38:18.497996: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 14:38:18.497996: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 14:38:18.497996: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 14:38:18.497996: 12. clickhouse-server() [0x71eee5f]
2019-07-10 14:38:18.497996: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 14:38:18.497996: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 14:38:18.497996: 
2019-07-10 14:38:23.513149: Continuing after exception
2019-07-10 14:38:23.513879: Thread 139936588891904 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 14:38:26.320609: Thread 139936327468800 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 14:38:47.567957: Iteration 4: 0.04
2019-07-10 14:38:59.655638: Thread 139936639354624 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 14:39:10.166185: Thread 139936630900480 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 14:39:40.583183: Iteration 5: 0.03
2019-07-10 14:39:59.332937: Thread 139936588891904 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 14:40:01.915531: Thread 139936639354624 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 14:40:06.501860: Thread 139936588891904 encountered an exception:
2019-07-10 14:40:06.502605: Code: 241.
2019-07-10 14:40:06.502643: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 14:40:06.502643: 
2019-07-10 14:40:06.502643: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 14:40:06.502643: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 14:40:06.502643: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 14:40:06.502643: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 14:40:06.502643: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 14:40:06.502643: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 14:40:06.502643: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 14:40:06.502643: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 14:40:06.502643: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 14:40:06.502643: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 14:40:06.502643: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 14:40:06.502643: 11. clickhouse-server() [0x71eee5f]
2019-07-10 14:40:06.502643: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 14:40:06.502643: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 14:40:06.502643: 
2019-07-10 14:40:10.989061: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 14:40:11.504759: Continuing after exception
2019-07-10 14:40:11.506443: Thread 139936588891904 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 14:40:36.586695: Iteration 6: 0.02
2019-07-10 14:41:10.900968: Thread 139936327468800 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 14:41:32.628648: Iteration 7: 0.06
2019-07-10 14:41:46.918741: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 14:41:55.358138: Thread 139936327468800 encountered an exception:
2019-07-10 14:41:55.358653: Code: 241.
2019-07-10 14:41:55.358700: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 4096 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 14:41:55.358700: 
2019-07-10 14:41:55.358700: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 14:41:55.358700: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 14:41:55.358700: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 14:41:55.358700: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 14:41:55.358700: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 14:41:55.358700: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 14:41:55.358700: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 14:41:55.358700: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 14:41:55.358700: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 14:41:55.358700: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 14:41:55.358700: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 14:41:55.358700: 11. clickhouse-server() [0x71eee5f]
2019-07-10 14:41:55.358700: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 14:41:55.358700: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 14:41:55.358700: 
2019-07-10 14:42:00.360225: Continuing after exception
2019-07-10 14:42:00.361367: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 14:42:33.666860: Iteration 8: 0.06
2019-07-10 14:42:41.023390: Thread 139936639354624 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 14:42:52.291461: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 14:43:12.898671: Thread 139936630900480 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 14:43:29.706401: Iteration 9: 0.06
2019-07-10 14:43:37.264879: Thread 139936588891904 encountered an exception:
2019-07-10 14:43:37.265897: Code: 241.
2019-07-10 14:43:37.265949: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 4096 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 14:43:37.265949: 
2019-07-10 14:43:37.265949: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 14:43:37.265949: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 14:43:37.265949: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 14:43:37.265949: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 14:43:37.265949: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 14:43:37.265949: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 14:43:37.265949: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 14:43:37.265949: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 14:43:37.265949: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 14:43:37.265949: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 14:43:37.265949: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 14:43:37.265949: 11. clickhouse-server() [0x71eee5f]
2019-07-10 14:43:37.265949: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 14:43:37.265949: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 14:43:37.265949: 
2019-07-10 14:43:39.017813: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 14:43:42.273582: Continuing after exception
2019-07-10 14:43:42.274638: Thread 139936588891904 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 14:43:58.359945: Thread 139936630900480 encountered an exception:
2019-07-10 14:43:58.360915: Code: 241.
2019-07-10 14:43:58.360972: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 128 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 14:43:58.360972: 
2019-07-10 14:43:58.360972: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 14:43:58.360972: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 14:43:58.360972: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 14:43:58.360972: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 14:43:58.360972: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x1e7) [0x5944827]
2019-07-10 14:43:58.360972: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 14:43:58.360972: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 14:43:58.360972: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 14:43:58.360972: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 14:43:58.360972: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 14:43:58.360972: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 14:43:58.360972: 11. clickhouse-server() [0x71eee5f]
2019-07-10 14:43:58.360972: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 14:43:58.360972: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 14:43:58.360972: 
2019-07-10 14:44:03.367859: Continuing after exception
2019-07-10 14:44:03.368511: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 14:44:19.559719: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 14:44:28.770569: Iteration 10: 0.08
2019-07-10 14:44:28.771635: 
2019-07-10 14:44:28.771659: Results for 5 records averaged over 11 repetitions:
2019-07-10 14:44:28.772706: Actual rows fetched: 5
2019-07-10 14:44:28.773233: Time to execute select: 0.04 seconds
2019-07-10 14:44:28.773754: Time to put into dataframe: 0.01 seconds
2019-07-10 14:44:28.774279: Total time: 0.05 seconds
2019-07-10 14:44:44.554293: Thread 139936588891904 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 14:44:51.168437: Thread 139936588891904 encountered an exception:
2019-07-10 14:44:51.169048: Code: 241.
2019-07-10 14:44:51.169073: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 14:44:51.169073: 
2019-07-10 14:44:51.169073: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 14:44:51.169073: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 14:44:51.169073: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 14:44:51.169073: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 14:44:51.169073: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 14:44:51.169073: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 14:44:51.169073: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 14:44:51.169073: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 14:44:51.169073: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 14:44:51.169073: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 14:44:51.169073: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 14:44:51.169073: 11. clickhouse-server() [0x71eee5f]
2019-07-10 14:44:51.169073: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 14:44:51.169073: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 14:44:51.169073: 
2019-07-10 14:44:56.174008: Continuing after exception
2019-07-10 14:44:56.175216: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 14:45:14.526456: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 14:45:18.814160: Iteration 0: 0.05
2019-07-10 14:45:28.945166: Thread 139936630900480 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 14:45:35.758374: Thread 139936630900480 encountered an exception:
2019-07-10 14:45:35.759414: Code: 241.
2019-07-10 14:45:35.759464: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 14:45:35.759464: 
2019-07-10 14:45:35.759464: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 14:45:35.759464: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 14:45:35.759464: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 14:45:35.759464: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 14:45:35.759464: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 14:45:35.759464: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 14:45:35.759464: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 14:45:35.759464: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 14:45:35.759464: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 14:45:35.759464: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 14:45:35.759464: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 14:45:35.759464: 11. clickhouse-server() [0x71eee5f]
2019-07-10 14:45:35.759464: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 14:45:35.759464: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 14:45:35.759464: 
2019-07-10 14:45:40.766344: Continuing after exception
2019-07-10 14:45:40.767456: Thread 139936630900480 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 14:45:53.485571: Thread 139936639354624 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 14:46:15.833656: Iteration 1: 0.04
2019-07-10 14:46:36.517074: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 14:47:15.883466: Iteration 2: 0.07
2019-07-10 14:47:21.922279: Thread 139936630900480 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 14:47:34.509789: Thread 139936639354624 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 14:48:06.495812: Thread 139936630900480 encountered an exception:
2019-07-10 14:48:06.496840: Code: 241.
2019-07-10 14:48:06.496890: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 8192 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 14:48:06.496890: 
2019-07-10 14:48:06.496890: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 14:48:06.496890: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 14:48:06.496890: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 14:48:06.496890: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 14:48:06.496890: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 14:48:06.496890: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 14:48:06.496890: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 14:48:06.496890: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 14:48:06.496890: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 14:48:06.496890: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 14:48:06.496890: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 14:48:06.496890: 11. clickhouse-server() [0x71eee5f]
2019-07-10 14:48:06.496890: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 14:48:06.496890: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 14:48:06.496890: 
2019-07-10 14:48:11.503881: Continuing after exception
2019-07-10 14:48:11.504993: Thread 139936630900480 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 14:48:13.653889: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 14:48:17.237911: Iteration 3: 0.37
2019-07-10 14:48:18.827582: Thread 139936630900480 encountered an exception:
2019-07-10 14:48:18.828561: Code: 241.
2019-07-10 14:48:18.828610: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 14:48:18.828610: 
2019-07-10 14:48:18.828610: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 14:48:18.828610: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 14:48:18.828610: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 14:48:18.828610: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 14:48:18.828610: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 14:48:18.828610: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 14:48:18.828610: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 14:48:18.828610: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 14:48:18.828610: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 14:48:18.828610: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 14:48:18.828610: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 14:48:18.828610: 11. clickhouse-server() [0x71eee5f]
2019-07-10 14:48:18.828610: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 14:48:18.828610: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 14:48:18.828610: 
2019-07-10 14:48:23.836032: Continuing after exception
2019-07-10 14:48:23.837133: Thread 139936630900480 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 14:48:45.437263: Thread 139936327468800 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 14:48:52.722542: Thread 139936327468800 encountered an exception:
2019-07-10 14:48:52.723516: Code: 241.
2019-07-10 14:48:52.723566: DB::Exception: Memory limit (for query) exceeded: would use 9.37 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 14:48:52.723566: 
2019-07-10 14:48:52.723566: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 14:48:52.723566: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 14:48:52.723566: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 14:48:52.723566: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 14:48:52.723566: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 14:48:52.723566: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 14:48:52.723566: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 14:48:52.723566: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 14:48:52.723566: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 14:48:52.723566: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 14:48:52.723566: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 14:48:52.723566: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 14:48:52.723566: 12. clickhouse-server() [0x71eee5f]
2019-07-10 14:48:52.723566: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 14:48:52.723566: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 14:48:52.723566: 
2019-07-10 14:48:57.730860: Continuing after exception
2019-07-10 14:48:57.731995: Thread 139936327468800 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 14:48:58.310431: Thread 139936639354624 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 14:49:08.270162: Iteration 4: 0.05
2019-07-10 14:49:23.995714: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 14:49:50.951400: Thread 139936588891904 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 14:50:04.313094: Iteration 5: 0.06
2019-07-10 14:50:37.712001: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 14:50:39.161519: Thread 139936327468800 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 14:50:51.099230: Thread 139936630900480 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 14:51:05.368597: Iteration 6: 0.07
2019-07-10 14:51:17.192951: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 14:52:01.375116: Iteration 7: 0.02
2019-07-10 14:52:07.439323: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 14:52:30.586450: Thread 139936630900480 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 14:52:54.438305: Iteration 8: 0.08
2019-07-10 14:52:58.914999: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 14:53:46.665473: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 14:53:48.480737: Iteration 9: 0.06
2019-07-10 14:54:11.067117: Thread 139936639354624 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 14:54:39.756873: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 14:54:40.522144: Iteration 10: 0.05
2019-07-10 14:54:40.522747: 
2019-07-10 14:54:40.522757: Results for 10 records averaged over 11 repetitions:
2019-07-10 14:54:40.523395: Actual rows fetched: 10
2019-07-10 14:54:40.523946: Time to execute select: 0.07 seconds
2019-07-10 14:54:40.524460: Time to put into dataframe: 0.01 seconds
2019-07-10 14:54:40.524877: Total time: 0.08 seconds
2019-07-10 14:55:27.646735: Thread 139936327468800 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 14:55:33.576426: Iteration 0: 0.06
2019-07-10 14:56:05.227243: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 14:56:22.354874: Thread 139936588891904 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 14:56:27.623070: Iteration 1: 0.06
2019-07-10 14:56:50.889558: Thread 139936639354624 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 14:57:28.673321: Iteration 2: 0.06
2019-07-10 14:57:34.817425: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 14:58:02.960258: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 14:58:09.754507: Thread 139936327468800 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 14:58:26.727085: Iteration 3: 0.07
2019-07-10 14:59:11.576533: Thread 139936630900480 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 14:59:13.771253: Thread 139936327468800 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 14:59:21.775489: Iteration 4: 0.06
2019-07-10 14:59:40.747036: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 14:59:54.148192: Thread 139936588891904 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:00:15.068673: Thread 139936630900480 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 15:00:17.817185: Iteration 5: 0.05
2019-07-10 15:00:50.992410: Thread 139936327468800 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:01:05.753955: Thread 139936588891904 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:01:10.837023: Iteration 6: 0.03
2019-07-10 15:01:16.380253: Thread 139936639354624 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:02:00.800262: Thread 139936639354624 encountered an exception:
2019-07-10 15:02:00.801201: Code: 241.
2019-07-10 15:02:00.801289: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 8192 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:02:00.801289: 
2019-07-10 15:02:00.801289: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:02:00.801289: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:02:00.801289: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:02:00.801289: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 15:02:00.801289: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 15:02:00.801289: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 15:02:00.801289: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:02:00.801289: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:02:00.801289: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:02:00.801289: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:02:00.801289: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:02:00.801289: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:02:00.801289: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:02:00.801289: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:02:00.801289: 
2019-07-10 15:02:01.883293: Iteration 7: 0.06
2019-07-10 15:02:05.808106: Continuing after exception
2019-07-10 15:02:05.809155: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:02:25.415424: Thread 139936327468800 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 15:02:31.968729: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:02:32.834009: Thread 139936327468800 encountered an exception:
2019-07-10 15:02:32.834439: Code: 241.
2019-07-10 15:02:32.834463: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:02:32.834463: 
2019-07-10 15:02:32.834463: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:02:32.834463: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:02:32.834463: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:02:32.834463: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 15:02:32.834463: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 15:02:32.834463: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 15:02:32.834463: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:02:32.834463: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:02:32.834463: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:02:32.834463: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:02:32.834463: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:02:32.834463: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:02:32.834463: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:02:32.834463: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:02:32.834463: 
2019-07-10 15:02:37.835755: Continuing after exception
2019-07-10 15:02:37.837023: Thread 139936327468800 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:02:56.933202: Iteration 8: 0.06
2019-07-10 15:03:00.546340: Thread 139936630900480 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 15:03:07.681551: Thread 139936630900480 encountered an exception:
2019-07-10 15:03:07.682671: Code: 241.
2019-07-10 15:03:07.682722: DB::Exception: Memory limit (for query) exceeded: would use 9.44 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:03:07.682722: 
2019-07-10 15:03:07.682722: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:03:07.682722: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:03:07.682722: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:03:07.682722: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:03:07.682722: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 15:03:07.682722: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 15:03:07.682722: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 15:03:07.682722: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:03:07.682722: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:03:07.682722: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:03:07.682722: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:03:07.682722: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:03:07.682722: 12. clickhouse-server() [0x71eee5f]
2019-07-10 15:03:07.682722: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:03:07.682722: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:03:07.682722: 
2019-07-10 15:03:12.699786: Continuing after exception
2019-07-10 15:03:12.700201: Thread 139936630900480 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:03:39.419266: Thread 139936639354624 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:03:48.370040: Thread 139936327468800 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:03:54.977811: Iteration 9: 0.06
2019-07-10 15:04:10.954293: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:04:25.878986: Thread 139936639354624 encountered an exception:
2019-07-10 15:04:25.879434: Code: 241.
2019-07-10 15:04:25.879467: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 16384 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:04:25.879467: 
2019-07-10 15:04:25.879467: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:04:25.879467: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:04:25.879467: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:04:25.879467: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 15:04:25.879467: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 15:04:25.879467: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 15:04:25.879467: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:04:25.879467: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:04:25.879467: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:04:25.879467: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:04:25.879467: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:04:25.879467: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:04:25.879467: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:04:25.879467: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:04:25.879467: 
2019-07-10 15:04:30.881025: Continuing after exception
2019-07-10 15:04:30.882284: Thread 139936639354624 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 15:04:33.897203: Thread 139936327468800 encountered an exception:
2019-07-10 15:04:33.897750: Code: 241.
2019-07-10 15:04:33.897766: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 128 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:04:33.897766: 
2019-07-10 15:04:33.897766: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:04:33.897766: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:04:33.897766: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:04:33.897766: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 15:04:33.897766: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 15:04:33.897766: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 15:04:33.897766: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:04:33.897766: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:04:33.897766: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:04:33.897766: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:04:33.897766: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:04:33.897766: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:04:33.897766: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:04:33.897766: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:04:33.897766: 
2019-07-10 15:04:38.900466: Continuing after exception
2019-07-10 15:04:38.901854: Thread 139936327468800 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:04:47.493076: Iteration 10: 0.52
2019-07-10 15:04:47.493573: 
2019-07-10 15:04:47.493584: Results for 100 records averaged over 11 repetitions:
2019-07-10 15:04:47.493932: Actual rows fetched: 100
2019-07-10 15:04:47.494132: Time to execute select: 0.09 seconds
2019-07-10 15:04:47.494332: Time to put into dataframe: 0.01 seconds
2019-07-10 15:04:47.494528: Total time: 0.10 seconds
2019-07-10 15:04:56.717135: Thread 139936588891904 encountered an exception:
2019-07-10 15:04:56.718395: Code: 241.
2019-07-10 15:04:56.718462: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 512 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:04:56.718462: 
2019-07-10 15:04:56.718462: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:04:56.718462: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:04:56.718462: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:04:56.718462: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 15:04:56.718462: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 15:04:56.718462: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 15:04:56.718462: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:04:56.718462: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:04:56.718462: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:04:56.718462: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:04:56.718462: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:04:56.718462: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:04:56.718462: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:04:56.718462: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:04:56.718462: 
2019-07-10 15:05:01.736291: Continuing after exception
2019-07-10 15:05:01.738097: Thread 139936588891904 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:05:43.569643: Iteration 0: 0.09
2019-07-10 15:06:13.685947: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:06:40.417389: Thread 139936630900480 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 15:06:41.633497: Iteration 1: 0.08
2019-07-10 15:07:09.703991: Thread 139936639354624 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 15:07:34.709629: Iteration 2: 0.09
2019-07-10 15:07:43.091575: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:07:55.342571: Thread 139936327468800 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:08:10.757554: Thread 139936639354624 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:08:33.772778: Iteration 3: 0.08
2019-07-10 15:08:34.443712: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:08:41.073534: Thread 139936327468800 encountered an exception:
2019-07-10 15:08:41.074547: Code: 241.
2019-07-10 15:08:41.074595: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 8192 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:08:41.074595: 
2019-07-10 15:08:41.074595: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:08:41.074595: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:08:41.074595: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:08:41.074595: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 15:08:41.074595: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 15:08:41.074595: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 15:08:41.074595: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:08:41.074595: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:08:41.074595: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:08:41.074595: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:08:41.074595: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:08:41.074595: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:08:41.074595: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:08:41.074595: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:08:41.074595: 
2019-07-10 15:08:46.082691: Continuing after exception
2019-07-10 15:08:46.083140: Thread 139936327468800 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:08:56.182230: Thread 139936639354624 encountered an exception:
2019-07-10 15:08:56.183380: Code: 241.
2019-07-10 15:08:56.183430: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 65536 bytes), maximum: 9.31 GiB: (while reading column protocolname): (while reading from part /ClikHausData/data_root/data/netflow/netflow_raw/201901_4645169_4721667_232/ from mark 92411 with max_rows_to_read = 5000). Stack trace:
2019-07-10 15:08:56.183430: 
2019-07-10 15:08:56.183430: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:08:56.183430: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:08:56.183430: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:08:56.183430: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:08:56.183430: 4. clickhouse-server(DB::DataTypeString::deserializeBinaryBulk(DB::IColumn&, DB::ReadBuffer&, unsigned long, double) const+0x2ed) [0x5cdfa9d]
2019-07-10 15:08:56.183430: 5. clickhouse-server(DB::MergeTreeReader::readData(std::string const&, DB::IDataType const&, DB::IColumn&, unsigned long, bool, unsigned long, bool)+0x2ea) [0x637406a]
2019-07-10 15:08:56.183430: 6. clickhouse-server(DB::MergeTreeReader::readRows(unsigned long, bool, unsigned long, DB::Block&)+0x2f3) [0x6374703]
2019-07-10 15:08:56.183430: 7. clickhouse-server(DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)+0x13e) [0x63702ee]
2019-07-10 15:08:56.183430: 8. clickhouse-server(DB::MergeTreeRangeReader::startReadingChain(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x19f) [0x6370fff]
2019-07-10 15:08:56.183430: 9. clickhouse-server(DB::MergeTreeRangeReader::read(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x622) [0x6372792]
2019-07-10 15:08:56.183430: 10. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readFromPart()+0x7d0) [0x6363c00]
2019-07-10 15:08:56.183430: 11. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readImpl()+0xa3) [0x6365113]
2019-07-10 15:08:56.183430: 12. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 15:08:56.183430: 13. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x61ae2ba]
2019-07-10 15:08:56.183430: 14. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 15:08:56.183430: 15. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x2b5) [0x61da335]
2019-07-10 15:08:56.183430: 16. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:08:56.183430: 17. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:08:56.183430: 18. clickhouse-server() [0x71eee5f]
2019-07-10 15:08:56.183430: 19. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:08:56.183430: 20. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:08:56.183430: 
2019-07-10 15:09:01.192479: Continuing after exception
2019-07-10 15:09:01.193145: Thread 139936639354624 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:09:06.644194: Thread 139936630900480 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:09:27.817370: Iteration 4: 0.06
2019-07-10 15:10:10.491449: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:10:14.141928: Thread 139936588891904 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:10:24.866756: Iteration 5: 0.06
2019-07-10 15:10:42.230181: Thread 139936639354624 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:10:47.280094: Thread 139936630900480 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 15:10:55.303844: Thread 139936630900480 encountered an exception:
2019-07-10 15:10:55.305486: Code: 241.
2019-07-10 15:10:55.305584: DB::Exception: Memory limit (for query) exceeded: would use 9.40 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:10:55.305584: 
2019-07-10 15:10:55.305584: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:10:55.305584: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:10:55.305584: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:10:55.305584: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:10:55.305584: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 15:10:55.305584: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 15:10:55.305584: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 15:10:55.305584: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:10:55.305584: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:10:55.305584: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:10:55.305584: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:10:55.305584: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:10:55.305584: 12. clickhouse-server() [0x71eee5f]
2019-07-10 15:10:55.305584: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:10:55.305584: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:10:55.305584: 
2019-07-10 15:11:00.309994: Continuing after exception
2019-07-10 15:11:00.310610: Thread 139936630900480 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:11:22.923000: Iteration 6: 0.07
2019-07-10 15:12:11.294614: Thread 139936630900480 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:12:13.973791: Iteration 7: 0.06
2019-07-10 15:12:20.791280: Thread 139936639354624 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:13:09.029226: Iteration 8: 0.07
2019-07-10 15:13:22.528039: Thread 139936630900480 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:13:44.070497: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:13:45.657217: Thread 139936588891904 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:14:01.091912: Iteration 9: 0.07
2019-07-10 15:14:01.876665: Thread 139936639354624 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 15:15:00.086458: Iteration 10: 1.01
2019-07-10 15:15:00.087341: 
2019-07-10 15:15:00.087353: Results for 500 records averaged over 11 repetitions:
2019-07-10 15:15:00.089117: Actual rows fetched: 500
2019-07-10 15:15:00.089441: Time to execute select: 0.15 seconds
2019-07-10 15:15:00.089664: Time to put into dataframe: 0.01 seconds
2019-07-10 15:15:00.090232: Total time: 0.16 seconds
2019-07-10 15:15:03.262057: Thread 139936630900480 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:15:11.885872: Thread 139936588891904 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 15:15:48.892242: Thread 139936630900480 encountered an exception:
2019-07-10 15:15:48.893320: Code: 241.
2019-07-10 15:15:48.893349: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 32768 bytes), maximum: 9.31 GiB: (avg_value_size_hint = 13, avg_chars_size = 6, limit = 5000): (while reading column protocolname): (while reading from part /ClikHausData/data_root/data/netflow/netflow_raw/201812_4602466_4648029_9/ from mark 36245 with max_rows_to_read = 5000). Stack trace:
2019-07-10 15:15:48.893349: 
2019-07-10 15:15:48.893349: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:15:48.893349: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:15:48.893349: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:15:48.893349: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:15:48.893349: 4. clickhouse-server() [0x5cd9945]
2019-07-10 15:15:48.893349: 5. clickhouse-server(DB::DataTypeString::deserializeBinaryBulk(DB::IColumn&, DB::ReadBuffer&, unsigned long, double) const+0x2d0) [0x5cdfa80]
2019-07-10 15:15:48.893349: 6. clickhouse-server(DB::MergeTreeReader::readData(std::string const&, DB::IDataType const&, DB::IColumn&, unsigned long, bool, unsigned long, bool)+0x2ea) [0x637406a]
2019-07-10 15:15:48.893349: 7. clickhouse-server(DB::MergeTreeReader::readRows(unsigned long, bool, unsigned long, DB::Block&)+0x2f3) [0x6374703]
2019-07-10 15:15:48.893349: 8. clickhouse-server(DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)+0x13e) [0x63702ee]
2019-07-10 15:15:48.893349: 9. clickhouse-server(DB::MergeTreeRangeReader::startReadingChain(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x19f) [0x6370fff]
2019-07-10 15:15:48.893349: 10. clickhouse-server(DB::MergeTreeRangeReader::read(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x622) [0x6372792]
2019-07-10 15:15:48.893349: 11. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readFromPart()+0x7d0) [0x6363c00]
2019-07-10 15:15:48.893349: 12. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readImpl()+0xa3) [0x6365113]
2019-07-10 15:15:48.893349: 13. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 15:15:48.893349: 14. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x61ae2ba]
2019-07-10 15:15:48.893349: 15. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 15:15:48.893349: 16. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x2b5) [0x61da335]
2019-07-10 15:15:48.893349: 17. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:15:48.893349: 18. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:15:48.893349: 19. clickhouse-server() [0x71eee5f]
2019-07-10 15:15:48.893349: 20. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:15:48.893349: 21. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:15:48.893349: 
2019-07-10 15:15:53.917761: Continuing after exception
2019-07-10 15:15:54.028909: Thread 139936630900480 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 15:15:56.235382: Iteration 0: 0.16
2019-07-10 15:16:49.211086: Thread 139936639354624 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:16:57.184457: Thread 139936630900480 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 15:16:57.367061: Iteration 1: 0.14
2019-07-10 15:17:16.318510: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:17:34.325780: Thread 139936639354624 encountered an exception:
2019-07-10 15:17:34.326201: Code: 241.
2019-07-10 15:17:34.326223: DB::Exception: Memory limit (for query) exceeded: would use 9.36 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:17:34.326223: 
2019-07-10 15:17:34.326223: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:17:34.326223: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:17:34.326223: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:17:34.326223: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:17:34.326223: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 15:17:34.326223: 5. clickhouse-server(DB::ColumnString::serializeValueIntoArena(unsigned long, DB::Arena&, char const*&) const+0x93) [0x5ebec23]
2019-07-10 15:17:34.326223: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x88) [0x627a2e8]
2019-07-10 15:17:34.326223: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:17:34.326223: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:17:34.326223: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:17:34.326223: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:17:34.326223: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:17:34.326223: 12. clickhouse-server() [0x71eee5f]
2019-07-10 15:17:34.326223: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:17:34.326223: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:17:34.326223: 
2019-07-10 15:17:39.328408: Continuing after exception
2019-07-10 15:17:39.328902: Thread 139936639354624 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:17:50.867783: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:17:57.473702: Iteration 2: 0.12
2019-07-10 15:17:58.573750: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:18:50.208894: Iteration 3: 0.74
2019-07-10 15:19:20.518042: Thread 139936639354624 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 15:19:25.929527: Thread 139936630900480 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 15:19:32.042619: Thread 139936588891904 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:19:40.729964: Iteration 4: 0.53
2019-07-10 15:20:41.866173: Iteration 5: 0.14
2019-07-10 15:20:52.278470: Thread 139936327468800 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:21:08.371635: Thread 139936588891904 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 15:21:15.338741: Thread 139936588891904 encountered an exception:
2019-07-10 15:21:15.339213: Code: 241.
2019-07-10 15:21:15.339235: DB::Exception: Memory limit (for query) exceeded: would use 9.38 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:21:15.339235: 
2019-07-10 15:21:15.339235: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:21:15.339235: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:21:15.339235: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:21:15.339235: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:21:15.339235: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 15:21:15.339235: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 15:21:15.339235: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 15:21:15.339235: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:21:15.339235: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:21:15.339235: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:21:15.339235: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:21:15.339235: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:21:15.339235: 12. clickhouse-server() [0x71eee5f]
2019-07-10 15:21:15.339235: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:21:15.339235: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:21:15.339235: 
2019-07-10 15:21:20.340169: Continuing after exception
2019-07-10 15:21:20.340643: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:21:37.375972: Iteration 6: 0.50
2019-07-10 15:21:59.300668: Thread 139936639354624 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:22:05.153439: Thread 139936630900480 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:22:25.702139: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:22:38.866898: Iteration 7: 0.47
2019-07-10 15:23:02.102185: Thread 139936588891904 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 15:23:09.639466: Thread 139936639354624 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:23:29.040814: Iteration 8: 0.17
2019-07-10 15:23:44.768749: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:24:04.558535: Thread 139936588891904 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 15:24:04.782727: Thread 139936327468800 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:24:11.581007: Thread 139936588891904 encountered an exception:
2019-07-10 15:24:11.588874: Code: 241.
2019-07-10 15:24:11.588937: DB::Exception: Memory limit (for query) exceeded: would use 9.36 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:24:11.588937: 
2019-07-10 15:24:11.588937: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:24:11.588937: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:24:11.588937: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:24:11.588937: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:24:11.588937: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 15:24:11.588937: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 15:24:11.588937: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 15:24:11.588937: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:24:11.588937: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:24:11.588937: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:24:11.588937: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:24:11.588937: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:24:11.588937: 12. clickhouse-server() [0x71eee5f]
2019-07-10 15:24:11.588937: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:24:11.588937: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:24:11.588937: 
2019-07-10 15:24:16.715370: Continuing after exception
2019-07-10 15:24:16.716385: Thread 139936588891904 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:24:20.284256: Iteration 9: 0.25
2019-07-10 15:24:48.101093: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:25:19.163745: Thread 139936630900480 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 15:25:20.460253: Iteration 10: 0.16
2019-07-10 15:25:20.461220: 
2019-07-10 15:25:20.461237: Results for 1000 records averaged over 11 repetitions:
2019-07-10 15:25:20.461632: Actual rows fetched: 1000
2019-07-10 15:25:20.461789: Time to execute select: 0.29 seconds
2019-07-10 15:25:20.461926: Time to put into dataframe: 0.02 seconds
2019-07-10 15:25:20.462041: Total time: 0.31 seconds
2019-07-10 15:25:26.060089: Thread 139936630900480 encountered an exception:
2019-07-10 15:25:26.060813: Code: 241.
2019-07-10 15:25:26.060840: DB::Exception: Memory limit (for query) exceeded: would use 9.34 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:25:26.060840: 
2019-07-10 15:25:26.060840: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:25:26.060840: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:25:26.060840: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:25:26.060840: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:25:26.060840: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 15:25:26.060840: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 15:25:26.060840: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 15:25:26.060840: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:25:26.060840: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:25:26.060840: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:25:26.060840: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:25:26.060840: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:25:26.060840: 12. clickhouse-server() [0x71eee5f]
2019-07-10 15:25:26.060840: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:25:26.060840: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:25:26.060840: 
2019-07-10 15:25:28.351551: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:25:31.062186: Continuing after exception
2019-07-10 15:25:31.062663: Thread 139936630900480 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:25:42.191068: Thread 139936588891904 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:26:16.196322: Thread 139936630900480 encountered an exception:
2019-07-10 15:26:16.196765: Code: 241.
2019-07-10 15:26:16.196791: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 8192 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:26:16.196791: 
2019-07-10 15:26:16.196791: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:26:16.196791: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:26:16.196791: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:26:16.196791: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 15:26:16.196791: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 15:26:16.196791: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 15:26:16.196791: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:26:16.196791: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:26:16.196791: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:26:16.196791: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:26:16.196791: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:26:16.196791: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:26:16.196791: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:26:16.196791: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:26:16.196791: 
2019-07-10 15:26:18.315182: Iteration 0: 0.86
2019-07-10 15:26:21.134607: Thread 139936639354624 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:26:21.198297: Continuing after exception
2019-07-10 15:26:21.198879: Thread 139936630900480 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:27:05.944173: Thread 139936327468800 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:27:08.572292: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:27:11.747588: Iteration 1: 0.44
2019-07-10 15:27:32.995548: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:28:03.128919: Iteration 2: 0.39
2019-07-10 15:28:17.187329: Thread 139936327468800 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:28:49.355627: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:28:57.776846: Iteration 3: 0.66
2019-07-10 15:29:29.384516: Thread 139936327468800 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 15:29:55.100264: Iteration 4: 0.33
2019-07-10 15:29:56.515778: Thread 139936630900480 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 15:30:29.863542: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:30:31.330074: Thread 139936327468800 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:30:53.554252: Iteration 5: 0.46
2019-07-10 15:30:59.352936: Thread 139936630900480 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:31:08.524701: Thread 139936639354624 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:31:14.232336: Thread 139936588891904 encountered an exception:
2019-07-10 15:31:14.233313: Code: 241.
2019-07-10 15:31:14.233357: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 256 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:31:14.233357: 
2019-07-10 15:31:14.233357: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:31:14.233357: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:31:14.233357: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:31:14.233357: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 15:31:14.233357: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 15:31:14.233357: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 15:31:14.233357: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:31:14.233357: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:31:14.233357: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:31:14.233357: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:31:14.233357: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:31:14.233357: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:31:14.233357: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:31:14.233357: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:31:14.233357: 
2019-07-10 15:31:19.240372: Continuing after exception
2019-07-10 15:31:19.240885: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:31:45.934580: Iteration 6: 0.39
2019-07-10 15:31:57.573981: Thread 139936327468800 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 15:32:10.059030: Thread 139936630900480 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:32:20.097720: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:32:47.268947: Iteration 7: 0.34
2019-07-10 15:32:57.998398: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:33:42.585551: Iteration 8: 0.32
2019-07-10 15:33:52.021553: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:34:39.319863: Thread 139936327468800 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:34:40.985656: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:34:42.132025: Iteration 9: 0.55
2019-07-10 15:35:19.546424: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:35:33.838280: Iteration 10: 0.71
2019-07-10 15:35:33.851139: 
2019-07-10 15:35:33.851159: Results for 5000 records averaged over 11 repetitions:
2019-07-10 15:35:33.921052: Actual rows fetched: 5000
2019-07-10 15:35:33.922024: Time to execute select: 0.46 seconds
2019-07-10 15:35:33.929020: Time to put into dataframe: 0.04 seconds
2019-07-10 15:35:33.953979: Total time: 0.50 seconds
2019-07-10 15:35:57.149974: Thread 139936639354624 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:36:19.795257: Thread 139936327468800 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 15:36:20.528680: Thread 139936588891904 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 15:36:27.589305: Iteration 0: 1.62
2019-07-10 15:36:42.637139: Thread 139936639354624 encountered an exception:
2019-07-10 15:36:42.644870: Code: 241.
2019-07-10 15:36:42.644904: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1024 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:36:42.644904: 
2019-07-10 15:36:42.644904: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:36:42.644904: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:36:42.644904: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:36:42.644904: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 15:36:42.644904: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 15:36:42.644904: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 15:36:42.644904: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:36:42.644904: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:36:42.644904: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:36:42.644904: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:36:42.644904: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:36:42.644904: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:36:42.644904: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:36:42.644904: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:36:42.644904: 
2019-07-10 15:36:47.716300: Continuing after exception
2019-07-10 15:36:47.821923: Thread 139936639354624 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:36:54.253457: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:37:20.681488: Iteration 1: 2.08
2019-07-10 15:37:21.866724: Thread 139936588891904 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:37:59.079548: Thread 139936639354624 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:38:21.410279: Thread 139936630900480 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:38:22.131460: Iteration 2: 1.44
2019-07-10 15:38:44.468388: Thread 139936639354624 encountered an exception:
2019-07-10 15:38:44.468864: Code: 241.
2019-07-10 15:38:44.468882: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 65536 bytes), maximum: 9.31 GiB: (while reading column protocolname): (while reading from part /ClikHausData/data_root/data/netflow/netflow_raw/201812_4602466_4648029_9/ from mark 12080 with max_rows_to_read = 5000). Stack trace:
2019-07-10 15:38:44.468882: 
2019-07-10 15:38:44.468882: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:38:44.468882: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:38:44.468882: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:38:44.468882: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:38:44.468882: 4. clickhouse-server(DB::DataTypeString::deserializeBinaryBulk(DB::IColumn&, DB::ReadBuffer&, unsigned long, double) const+0x2ed) [0x5cdfa9d]
2019-07-10 15:38:44.468882: 5. clickhouse-server(DB::MergeTreeReader::readData(std::string const&, DB::IDataType const&, DB::IColumn&, unsigned long, bool, unsigned long, bool)+0x2ea) [0x637406a]
2019-07-10 15:38:44.468882: 6. clickhouse-server(DB::MergeTreeReader::readRows(unsigned long, bool, unsigned long, DB::Block&)+0x2f3) [0x6374703]
2019-07-10 15:38:44.468882: 7. clickhouse-server(DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)+0x13e) [0x63702ee]
2019-07-10 15:38:44.468882: 8. clickhouse-server(DB::MergeTreeRangeReader::startReadingChain(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x19f) [0x6370fff]
2019-07-10 15:38:44.468882: 9. clickhouse-server(DB::MergeTreeRangeReader::read(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x622) [0x6372792]
2019-07-10 15:38:44.468882: 10. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readFromPart()+0x7d0) [0x6363c00]
2019-07-10 15:38:44.468882: 11. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readImpl()+0xa3) [0x6365113]
2019-07-10 15:38:44.468882: 12. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 15:38:44.468882: 13. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x61ae2ba]
2019-07-10 15:38:44.468882: 14. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 15:38:44.468882: 15. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x2b5) [0x61da335]
2019-07-10 15:38:44.468882: 16. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:38:44.468882: 17. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:38:44.468882: 18. clickhouse-server() [0x71eee5f]
2019-07-10 15:38:44.468882: 19. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:38:44.468882: 20. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:38:44.468882: 
2019-07-10 15:38:49.470848: Continuing after exception
2019-07-10 15:38:49.471269: Thread 139936639354624 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:38:57.830823: Thread 139936588891904 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:39:00.826300: Thread 139936327468800 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:39:16.630447: Iteration 3: 1.47
2019-07-10 15:40:09.646758: Thread 139936588891904 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:40:11.342702: Iteration 4: 0.72
2019-07-10 15:40:12.753895: Thread 139936327468800 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:40:19.037003: Thread 139936639354624 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:41:13.117679: Iteration 5: 0.78
2019-07-10 15:41:20.921590: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:41:25.505038: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:41:30.674186: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:41:57.559753: Thread 139936630900480 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 15:42:04.578814: Thread 139936630900480 encountered an exception:
2019-07-10 15:42:04.579310: Code: 241.
2019-07-10 15:42:04.579328: DB::Exception: Memory limit (for query) exceeded: would use 9.34 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:42:04.579328: 
2019-07-10 15:42:04.579328: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:42:04.579328: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:42:04.579328: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:42:04.579328: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:42:04.579328: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 15:42:04.579328: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 15:42:04.579328: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 15:42:04.579328: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:42:04.579328: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:42:04.579328: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:42:04.579328: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:42:04.579328: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:42:04.579328: 12. clickhouse-server() [0x71eee5f]
2019-07-10 15:42:04.579328: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:42:04.579328: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:42:04.579328: 
2019-07-10 15:42:06.936317: Iteration 6: 0.82
2019-07-10 15:42:09.581667: Continuing after exception
2019-07-10 15:42:09.582027: Thread 139936630900480 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:42:54.167552: Thread 139936630900480 encountered an exception:
2019-07-10 15:42:54.168805: Code: 241.
2019-07-10 15:42:54.168865: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 128 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:42:54.168865: 
2019-07-10 15:42:54.168865: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:42:54.168865: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:42:54.168865: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:42:54.168865: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:42:54.168865: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x1e7) [0x5944827]
2019-07-10 15:42:54.168865: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 15:42:54.168865: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:42:54.168865: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:42:54.168865: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:42:54.168865: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:42:54.168865: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:42:54.168865: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:42:54.168865: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:42:54.168865: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:42:54.168865: 
2019-07-10 15:42:58.449256: Iteration 7: 0.52
2019-07-10 15:42:58.489006: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:42:59.173074: Continuing after exception
2019-07-10 15:42:59.174548: Thread 139936630900480 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:43:02.911609: Thread 139936327468800 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:43:57.056085: Iteration 8: 0.61
2019-07-10 15:44:30.014992: Thread 139936327468800 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:44:39.366877: Thread 139936588891904 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:44:40.089570: Thread 139936630900480 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:44:56.771677: Iteration 9: 0.72
2019-07-10 15:45:02.579283: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:45:52.404802: Iteration 10: 0.64
2019-07-10 15:45:52.405361: 
2019-07-10 15:45:52.405370: Results for 10000 records averaged over 11 repetitions:
2019-07-10 15:45:52.405729: Actual rows fetched: 10000
2019-07-10 15:45:52.405877: Time to execute select: 0.94 seconds
2019-07-10 15:45:52.406060: Time to put into dataframe: 0.10 seconds
2019-07-10 15:45:52.406220: Total time: 1.04 seconds
2019-07-10 15:46:04.338961: Thread 139936327468800 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:46:15.354660: Thread 139936588891904 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 15:46:38.995437: Thread 139936639354624 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 15:46:52.938113: Iteration 0: 6.53
2019-07-10 15:47:15.426895: Thread 139936327468800 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:47:41.345115: Thread 139936639354624 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 15:47:48.361749: Iteration 1: 5.43
2019-07-10 15:47:48.846767: Thread 139936639354624 encountered an exception:
2019-07-10 15:47:48.847294: Code: 241.
2019-07-10 15:47:48.847326: DB::Exception: Memory limit (for query) exceeded: would use 9.33 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:47:48.847326: 
2019-07-10 15:47:48.847326: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:47:48.847326: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:47:48.847326: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:47:48.847326: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:47:48.847326: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 15:47:48.847326: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 15:47:48.847326: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 15:47:48.847326: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:47:48.847326: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:47:48.847326: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:47:48.847326: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:47:48.847326: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:47:48.847326: 12. clickhouse-server() [0x71eee5f]
2019-07-10 15:47:48.847326: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:47:48.847326: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:47:48.847326: 
2019-07-10 15:47:53.849355: Continuing after exception
2019-07-10 15:47:53.849746: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:48:12.182838: Thread 139936630900480 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:48:41.617448: Thread 139936327468800 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:48:47.997685: Iteration 2: 4.64
2019-07-10 15:48:56.214650: Thread 139936588891904 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:49:24.125627: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:49:26.261688: Thread 139936327468800 encountered an exception:
2019-07-10 15:49:26.262147: Code: 241.
2019-07-10 15:49:26.262185: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 32768 bytes), maximum: 9.31 GiB: (avg_value_size_hint = 13, avg_chars_size = 6, limit = 3840): (while reading column protocolname): (while reading from part /ClikHausData/data_root/data/netflow/netflow_raw/201901_4645169_4721667_232/ from mark 92471 with max_rows_to_read = 3840). Stack trace:
2019-07-10 15:49:26.262185: 
2019-07-10 15:49:26.262185: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:49:26.262185: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:49:26.262185: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:49:26.262185: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:49:26.262185: 4. clickhouse-server() [0x5cd9945]
2019-07-10 15:49:26.262185: 5. clickhouse-server(DB::DataTypeString::deserializeBinaryBulk(DB::IColumn&, DB::ReadBuffer&, unsigned long, double) const+0x2d0) [0x5cdfa80]
2019-07-10 15:49:26.262185: 6. clickhouse-server(DB::MergeTreeReader::readData(std::string const&, DB::IDataType const&, DB::IColumn&, unsigned long, bool, unsigned long, bool)+0x2ea) [0x637406a]
2019-07-10 15:49:26.262185: 7. clickhouse-server(DB::MergeTreeReader::readRows(unsigned long, bool, unsigned long, DB::Block&)+0x2f3) [0x6374703]
2019-07-10 15:49:26.262185: 8. clickhouse-server(DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)+0x13e) [0x63702ee]
2019-07-10 15:49:26.262185: 9. clickhouse-server(DB::MergeTreeRangeReader::startReadingChain(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x19f) [0x6370fff]
2019-07-10 15:49:26.262185: 10. clickhouse-server(DB::MergeTreeRangeReader::read(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x622) [0x6372792]
2019-07-10 15:49:26.262185: 11. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readFromPart()+0x7d0) [0x6363c00]
2019-07-10 15:49:26.262185: 12. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readImpl()+0xa3) [0x6365113]
2019-07-10 15:49:26.262185: 13. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 15:49:26.262185: 14. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x61ae2ba]
2019-07-10 15:49:26.262185: 15. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 15:49:26.262185: 16. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x2b5) [0x61da335]
2019-07-10 15:49:26.262185: 17. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:49:26.262185: 18. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:49:26.262185: 19. clickhouse-server() [0x71eee5f]
2019-07-10 15:49:26.262185: 20. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:49:26.262185: 21. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:49:26.262185: 
2019-07-10 15:49:31.265542: Continuing after exception
2019-07-10 15:49:31.266040: Thread 139936327468800 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 15:49:46.686427: Iteration 3: 6.69
2019-07-10 15:50:23.367308: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:50:43.172293: Iteration 4: 5.49
2019-07-10 15:50:59.844786: Thread 139936630900480 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:51:09.316487: Thread 139936588891904 encountered an exception:
2019-07-10 15:51:09.317613: Code: 241.
2019-07-10 15:51:09.317679: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 256 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:51:09.317679: 
2019-07-10 15:51:09.317679: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:51:09.317679: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:51:09.317679: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:51:09.317679: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 15:51:09.317679: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 15:51:09.317679: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 15:51:09.317679: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:51:09.317679: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:51:09.317679: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:51:09.317679: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:51:09.317679: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:51:09.317679: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:51:09.317679: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:51:09.317679: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:51:09.317679: 
2019-07-10 15:51:14.334366: Continuing after exception
2019-07-10 15:51:14.335286: Thread 139936588891904 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 15:51:22.429981: Thread 139936588891904 encountered an exception:
2019-07-10 15:51:22.431146: Code: 241.
2019-07-10 15:51:22.431203: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:51:22.431203: 
2019-07-10 15:51:22.431203: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:51:22.431203: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:51:22.431203: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:51:22.431203: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 15:51:22.431203: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 15:51:22.431203: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 15:51:22.431203: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:51:22.431203: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:51:22.431203: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:51:22.431203: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:51:22.431203: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:51:22.431203: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:51:22.431203: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:51:22.431203: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:51:22.431203: 
2019-07-10 15:51:27.448226: Continuing after exception
2019-07-10 15:51:27.449668: Thread 139936588891904 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:51:28.062812: Thread 139936639354624 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:51:39.155841: Iteration 5: 4.99
2019-07-10 15:52:15.282945: Thread 139936327468800 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:52:35.113271: Iteration 6: 4.96
2019-07-10 15:52:38.576985: Thread 139936630900480 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:52:54.382670: Thread 139936639354624 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 15:53:00.638290: Thread 139936327468800 encountered an exception:
2019-07-10 15:53:00.639732: Code: 241.
2019-07-10 15:53:00.639797: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 256 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:53:00.639797: 
2019-07-10 15:53:00.639797: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:53:00.639797: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:53:00.639797: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:53:00.639797: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 15:53:00.639797: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 15:53:00.639797: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 15:53:00.639797: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:53:00.639797: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:53:00.639797: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:53:00.639797: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:53:00.639797: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:53:00.639797: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:53:00.639797: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:53:00.639797: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:53:00.639797: 
2019-07-10 15:53:05.660557: Continuing after exception
2019-07-10 15:53:05.662035: Thread 139936327468800 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:53:32.250909: Iteration 7: 5.14
2019-07-10 15:54:16.988501: Thread 139936630900480 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:54:22.001310: Thread 139936639354624 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:54:34.635157: Iteration 8: 5.39
2019-07-10 15:54:41.968435: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:55:02.994784: Thread 139936588891904 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:55:36.405067: Iteration 9: 4.78
2019-07-10 15:56:04.362917: Thread 139936639354624 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 15:56:11.997277: Thread 139936639354624 encountered an exception:
2019-07-10 15:56:11.998274: Code: 241.
2019-07-10 15:56:11.998327: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:56:11.998327: 
2019-07-10 15:56:11.998327: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:56:11.998327: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:56:11.998327: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:56:11.998327: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 15:56:11.998327: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 15:56:11.998327: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 15:56:11.998327: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:56:11.998327: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:56:11.998327: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:56:11.998327: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:56:11.998327: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:56:11.998327: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:56:11.998327: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:56:11.998327: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:56:11.998327: 
2019-07-10 15:56:14.311240: Thread 139936588891904 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 15:56:17.008538: Continuing after exception
2019-07-10 15:56:17.009716: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 15:56:18.579855: Thread 139936327468800 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:56:21.159796: Thread 139936588891904 encountered an exception:
2019-07-10 15:56:21.160817: Code: 241.
2019-07-10 15:56:21.160866: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:56:21.160866: 
2019-07-10 15:56:21.160866: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:56:21.160866: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:56:21.160866: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:56:21.160866: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 15:56:21.160866: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 15:56:21.160866: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 15:56:21.160866: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:56:21.160866: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:56:21.160866: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:56:21.160866: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:56:21.160866: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:56:21.160866: 11. clickhouse-server() [0x71eee5f]
2019-07-10 15:56:21.160866: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:56:21.160866: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:56:21.160866: 
2019-07-10 15:56:26.169783: Continuing after exception
2019-07-10 15:56:26.170892: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 15:56:35.936843: Iteration 10: 4.54
2019-07-10 15:56:35.937405: 
2019-07-10 15:56:35.937412: Results for 100000 records averaged over 11 repetitions:
2019-07-10 15:56:35.938190: Actual rows fetched: 100000
2019-07-10 15:56:35.938575: Time to execute select: 4.62 seconds
2019-07-10 15:56:35.939103: Time to put into dataframe: 0.71 seconds
2019-07-10 15:56:35.939375: Total time: 5.33 seconds
2019-07-10 15:57:29.127968: Thread 139936327468800 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 15:57:49.109897: Thread 139936630900480 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 15:57:56.846403: Thread 139936630900480 encountered an exception:
2019-07-10 15:57:56.931177: Code: 241.
2019-07-10 15:57:56.931222: DB::Exception: Memory limit (for query) exceeded: would use 9.32 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:57:56.931222: 
2019-07-10 15:57:56.931222: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:57:56.931222: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:57:56.931222: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:57:56.931222: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:57:56.931222: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 15:57:56.931222: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 15:57:56.931222: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 15:57:56.931222: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:57:56.931222: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:57:56.931222: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:57:56.931222: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:57:56.931222: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:57:56.931222: 12. clickhouse-server() [0x71eee5f]
2019-07-10 15:57:56.931222: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:57:56.931222: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:57:56.931222: 
2019-07-10 15:57:58.845611: Iteration 0: 22.91
2019-07-10 15:58:01.967371: Continuing after exception
2019-07-10 15:58:01.968435: Thread 139936630900480 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 15:58:06.053046: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 15:58:40.003322: Thread 139936327468800 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 15:59:21.407083: Iteration 1: 22.57
2019-07-10 15:59:45.403558: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 15:59:52.249788: Thread 139936639354624 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 15:59:59.820503: Thread 139936639354624 encountered an exception:
2019-07-10 15:59:59.821588: Code: 241.
2019-07-10 15:59:59.821642: DB::Exception: Memory limit (for query) exceeded: would use 9.41 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 15:59:59.821642: 
2019-07-10 15:59:59.821642: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 15:59:59.821642: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 15:59:59.821642: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 15:59:59.821642: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 15:59:59.821642: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 15:59:59.821642: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 15:59:59.821642: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 15:59:59.821642: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 15:59:59.821642: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 15:59:59.821642: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 15:59:59.821642: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 15:59:59.821642: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 15:59:59.821642: 12. clickhouse-server() [0x71eee5f]
2019-07-10 15:59:59.821642: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 15:59:59.821642: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 15:59:59.821642: 
2019-07-10 16:00:04.832039: Continuing after exception
2019-07-10 16:00:04.832691: Thread 139936639354624 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 16:00:12.784575: Thread 139936327468800 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:00:31.720141: Thread 139936588891904 encountered an exception:
2019-07-10 16:00:31.751529: Code: 241.
2019-07-10 16:00:31.751563: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1024 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:00:31.751563: 
2019-07-10 16:00:31.751563: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:00:31.751563: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:00:31.751563: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:00:31.751563: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 16:00:31.751563: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 16:00:31.751563: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 16:00:31.751563: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:00:31.751563: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:00:31.751563: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:00:31.751563: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:00:31.751563: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:00:31.751563: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:00:31.751563: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:00:31.751563: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:00:31.751563: 
2019-07-10 16:00:36.802642: Iteration 2: 22.40
2019-07-10 16:00:36.802696: Continuing after exception
2019-07-10 16:00:36.803183: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 16:00:42.226977: Thread 139936630900480 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 16:01:31.516185: Thread 139936639354624 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 16:01:54.517287: Thread 139936630900480 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:01:54.684377: Iteration 3: 22.89
2019-07-10 16:02:16.860332: Thread 139936588891904 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:02:24.403267: Thread 139936588891904 encountered an exception:
2019-07-10 16:02:24.404267: Code: 241.
2019-07-10 16:02:24.404310: DB::Exception: Memory limit (for query) exceeded: would use 9.34 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:02:24.404310: 
2019-07-10 16:02:24.404310: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:02:24.404310: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:02:24.404310: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:02:24.404310: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 16:02:24.404310: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 16:02:24.404310: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 16:02:24.404310: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 16:02:24.404310: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:02:24.404310: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:02:24.404310: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:02:24.404310: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:02:24.404310: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:02:24.404310: 12. clickhouse-server() [0x71eee5f]
2019-07-10 16:02:24.404310: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:02:24.404310: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:02:24.404310: 
2019-07-10 16:02:29.413308: Continuing after exception
2019-07-10 16:02:29.414520: Thread 139936588891904 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 16:02:34.190214: Thread 139936639354624 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 16:02:58.054729: Thread 139936327468800 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 16:03:31.619075: Iteration 4: 39.94
2019-07-10 16:03:43.747031: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 16:03:44.782482: Thread 139936327468800 encountered an exception:
2019-07-10 16:03:44.862197: Code: 241.
2019-07-10 16:03:44.862230: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1024 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:03:44.862230: 
2019-07-10 16:03:44.862230: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:03:44.862230: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:03:44.862230: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:03:44.862230: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 16:03:44.862230: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 16:03:44.862230: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 16:03:44.862230: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:03:44.862230: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:03:44.862230: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:03:44.862230: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:03:44.862230: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:03:44.862230: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:03:44.862230: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:03:44.862230: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:03:44.862230: 
2019-07-10 16:03:49.866558: Continuing after exception
2019-07-10 16:03:50.656107: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:04:18.140457: Thread 139936639354624 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 16:04:29.691867: Thread 139936588891904 encountered an exception:
2019-07-10 16:04:29.692935: Code: 241.
2019-07-10 16:04:29.692985: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 4096 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:04:29.692985: 
2019-07-10 16:04:29.692985: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:04:29.692985: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:04:29.692985: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:04:29.692985: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 16:04:29.692985: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 16:04:29.692985: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 16:04:29.692985: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:04:29.692985: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:04:29.692985: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:04:29.692985: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:04:29.692985: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:04:29.692985: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:04:29.692985: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:04:29.692985: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:04:29.692985: 
2019-07-10 16:04:34.709114: Continuing after exception
2019-07-10 16:04:34.715175: Thread 139936588891904 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:04:37.595436: Thread 139936630900480 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:04:42.991915: Thread 139936588891904 encountered an exception:
2019-07-10 16:04:43.037024: Code: 241.
2019-07-10 16:04:43.037063: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:04:43.037063: 
2019-07-10 16:04:43.037063: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:04:43.037063: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:04:43.037063: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:04:43.037063: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 16:04:43.037063: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 16:04:43.037063: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 16:04:43.037063: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:04:43.037063: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:04:43.037063: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:04:43.037063: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:04:43.037063: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:04:43.037063: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:04:43.037063: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:04:43.037063: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:04:43.037063: 
2019-07-10 16:04:48.094274: Continuing after exception
2019-07-10 16:04:48.113198: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 16:04:56.096787: Iteration 5: 23.48
2019-07-10 16:05:58.859519: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:06:13.494106: Iteration 6: 22.40
2019-07-10 16:06:31.196405: Thread 139936588891904 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:07:19.813770: Thread 139936630900480 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 16:07:28.591381: Thread 139936327468800 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 16:07:34.289838: Iteration 7: 23.80
2019-07-10 16:08:08.173031: Thread 139936588891904 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:08:23.791365: Thread 139936630900480 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 16:08:54.982116: Iteration 8: 24.70
2019-07-10 16:08:58.126871: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 16:09:36.758823: Thread 139936630900480 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 16:09:37.035893: Thread 139936639354624 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 16:10:16.291029: Iteration 9: 24.31
2019-07-10 16:10:37.486560: Thread 139936327468800 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:10:49.835795: Thread 139936639354624 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:10:50.273789: Thread 139936588891904 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 16:11:16.231451: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:11:43.582676: Iteration 10: 30.30
2019-07-10 16:11:43.583287: 
2019-07-10 16:11:43.583300: Results for 500000 records averaged over 11 repetitions:
2019-07-10 16:11:43.583546: Actual rows fetched: 500000
2019-07-10 16:11:43.583660: Time to execute select: 21.66 seconds
2019-07-10 16:11:43.583774: Time to put into dataframe: 3.77 seconds
2019-07-10 16:11:43.583883: Total time: 25.43 seconds
2019-07-10 16:11:53.913317: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 16:12:39.588561: Thread 139936588891904 encountered an exception:
2019-07-10 16:12:39.641137: Code: 241.
2019-07-10 16:12:39.641162: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 2048 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:12:39.641162: 
2019-07-10 16:12:39.641162: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:12:39.641162: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:12:39.641162: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:12:39.641162: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 16:12:39.641162: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 16:12:39.641162: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 16:12:39.641162: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:12:39.641162: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:12:39.641162: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:12:39.641162: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:12:39.641162: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:12:39.641162: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:12:39.641162: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:12:39.641162: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:12:39.641162: 
2019-07-10 16:12:44.721179: Continuing after exception
2019-07-10 16:12:44.722309: Thread 139936588891904 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:12:52.706193: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 16:12:52.836033: Thread 139936588891904 encountered an exception:
2019-07-10 16:12:52.836469: Code: 241.
2019-07-10 16:12:52.836495: DB::Exception: Memory limit (for query) exceeded: would use 9.37 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:12:52.836495: 
2019-07-10 16:12:52.836495: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:12:52.836495: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:12:52.836495: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:12:52.836495: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 16:12:52.836495: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 16:12:52.836495: 5. clickhouse-server(DB::ColumnString::serializeValueIntoArena(unsigned long, DB::Arena&, char const*&) const+0x93) [0x5ebec23]
2019-07-10 16:12:52.836495: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x88) [0x627a2e8]
2019-07-10 16:12:52.836495: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:12:52.836495: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:12:52.836495: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:12:52.836495: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:12:52.836495: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:12:52.836495: 12. clickhouse-server() [0x71eee5f]
2019-07-10 16:12:52.836495: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:12:52.836495: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:12:52.836495: 
2019-07-10 16:12:57.854496: Continuing after exception
2019-07-10 16:12:57.875600: Thread 139936588891904 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:13:18.776609: Thread 139936327468800 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:13:32.575235: Thread 139936639354624 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 16:13:41.595412: Iteration 0: 63.02
2019-07-10 16:14:20.955880: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 16:14:33.770120: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 16:15:17.035410: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:15:20.419188: Thread 139936588891904 encountered an exception:
2019-07-10 16:15:20.445780: Code: 241.
2019-07-10 16:15:20.445824: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 65536 bytes), maximum: 9.31 GiB: (while reading column protocolname): (while reading from part /ClikHausData/data_root/data/netflow/netflow_raw/201812_1_4602465_734/ from mark 12220 with max_rows_to_read = 5000). Stack trace:
2019-07-10 16:15:20.445824: 
2019-07-10 16:15:20.445824: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:15:20.445824: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:15:20.445824: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:15:20.445824: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 16:15:20.445824: 4. clickhouse-server(DB::DataTypeString::deserializeBinaryBulk(DB::IColumn&, DB::ReadBuffer&, unsigned long, double) const+0x2ed) [0x5cdfa9d]
2019-07-10 16:15:20.445824: 5. clickhouse-server(DB::MergeTreeReader::readData(std::string const&, DB::IDataType const&, DB::IColumn&, unsigned long, bool, unsigned long, bool)+0x2ea) [0x637406a]
2019-07-10 16:15:20.445824: 6. clickhouse-server(DB::MergeTreeReader::readRows(unsigned long, bool, unsigned long, DB::Block&)+0x2f3) [0x6374703]
2019-07-10 16:15:20.445824: 7. clickhouse-server(DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)+0x13e) [0x63702ee]
2019-07-10 16:15:20.445824: 8. clickhouse-server(DB::MergeTreeRangeReader::startReadingChain(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x19f) [0x6370fff]
2019-07-10 16:15:20.445824: 9. clickhouse-server(DB::MergeTreeRangeReader::read(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x622) [0x6372792]
2019-07-10 16:15:20.445824: 10. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readFromPart()+0x7d0) [0x6363c00]
2019-07-10 16:15:20.445824: 11. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readImpl()+0xa3) [0x6365113]
2019-07-10 16:15:20.445824: 12. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 16:15:20.445824: 13. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x61ae2ba]
2019-07-10 16:15:20.445824: 14. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 16:15:20.445824: 15. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x2b5) [0x61da335]
2019-07-10 16:15:20.445824: 16. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:15:20.445824: 17. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:15:20.445824: 18. clickhouse-server() [0x71eee5f]
2019-07-10 16:15:20.445824: 19. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:15:20.445824: 20. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:15:20.445824: 
2019-07-10 16:15:25.569517: Continuing after exception
2019-07-10 16:15:25.578708: Thread 139936588891904 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 16:15:39.816809: Iteration 1: 58.23
2019-07-10 16:15:47.689416: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 16:16:01.482120: Thread 139936327468800 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 16:16:54.015552: Thread 139936588891904 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:16:54.520204: Thread 139936639354624 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 16:17:14.249839: Thread 139936327468800 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:17:17.314296: Thread 139936630900480 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 16:17:21.982489: Thread 139936327468800 encountered an exception:
2019-07-10 16:17:22.004684: Code: 241.
2019-07-10 16:17:22.004725: DB::Exception: Memory limit (for query) exceeded: would use 9.32 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:17:22.004725: 
2019-07-10 16:17:22.004725: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:17:22.004725: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:17:22.004725: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:17:22.004725: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 16:17:22.004725: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 16:17:22.004725: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 16:17:22.004725: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 16:17:22.004725: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:17:22.004725: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:17:22.004725: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:17:22.004725: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:17:22.004725: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:17:22.004725: 12. clickhouse-server() [0x71eee5f]
2019-07-10 16:17:22.004725: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:17:22.004725: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:17:22.004725: 
2019-07-10 16:17:27.363600: Continuing after exception
2019-07-10 16:17:28.108549: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 16:17:33.640722: Iteration 2: 54.83
2019-07-10 16:18:03.985350: Thread 139936639354624 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 16:18:54.994303: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:19:10.703655: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 16:19:14.982226: Iteration 3: 48.35
2019-07-10 16:19:32.109552: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:19:33.771128: Thread 139936588891904 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 16:20:31.112463: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:20:45.935483: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 16:20:51.520762: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:20:58.582733: Iteration 4: 51.61
2019-07-10 16:21:30.759502: Thread 139936588891904 encountered an exception:
2019-07-10 16:21:30.760631: Code: 241.
2019-07-10 16:21:30.760683: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 512 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:21:30.760683: 
2019-07-10 16:21:30.760683: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:21:30.760683: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:21:30.760683: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:21:30.760683: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 16:21:30.760683: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 16:21:30.760683: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 16:21:30.760683: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:21:30.760683: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:21:30.760683: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:21:30.760683: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:21:30.760683: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:21:30.760683: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:21:30.760683: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:21:30.760683: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:21:30.760683: 
2019-07-10 16:21:35.767715: Continuing after exception
2019-07-10 16:21:35.768905: Thread 139936588891904 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:22:05.895388: Thread 139936630900480 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 16:22:42.106208: Iteration 5: 46.53
2019-07-10 16:23:07.356697: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:23:09.005377: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:24:28.565799: Iteration 6: 46.47
2019-07-10 16:24:29.777136: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:24:45.698817: Thread 139936639354624 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:24:45.861214: Thread 139936630900480 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:24:53.039051: Thread 139936639354624 encountered an exception:
2019-07-10 16:24:53.039561: Code: 241.
2019-07-10 16:24:53.039596: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:24:53.039596: 
2019-07-10 16:24:53.039596: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:24:53.039596: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:24:53.039596: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:24:53.039596: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 16:24:53.039596: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 16:24:53.039596: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 16:24:53.039596: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:24:53.039596: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:24:53.039596: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:24:53.039596: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:24:53.039596: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:24:53.039596: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:24:53.039596: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:24:53.039596: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:24:53.039596: 
2019-07-10 16:24:58.043960: Continuing after exception
2019-07-10 16:24:58.044582: Thread 139936639354624 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:25:12.035156: Thread 139936588891904 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:26:14.495721: Iteration 7: 50.94
2019-07-10 16:26:47.562001: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 16:27:41.763027: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:28:02.125760: Iteration 8: 48.64
2019-07-10 16:28:09.488085: Thread 139936327468800 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:28:22.014946: Thread 139936630900480 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 16:28:31.236985: Thread 139936588891904 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:29:08.634185: Thread 139936630900480 encountered an exception:
2019-07-10 16:29:08.634645: Code: 241.
2019-07-10 16:29:08.634671: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 65536 bytes), maximum: 9.31 GiB: (while reading column protocolname): (while reading from part /ClikHausData/data_root/data/netflow/netflow_raw/201812_4602466_4648029_9/ from mark 12340 with max_rows_to_read = 5000). Stack trace:
2019-07-10 16:29:08.634671: 
2019-07-10 16:29:08.634671: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:29:08.634671: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:29:08.634671: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:29:08.634671: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 16:29:08.634671: 4. clickhouse-server(DB::DataTypeString::deserializeBinaryBulk(DB::IColumn&, DB::ReadBuffer&, unsigned long, double) const+0x2ed) [0x5cdfa9d]
2019-07-10 16:29:08.634671: 5. clickhouse-server(DB::MergeTreeReader::readData(std::string const&, DB::IDataType const&, DB::IColumn&, unsigned long, bool, unsigned long, bool)+0x2ea) [0x637406a]
2019-07-10 16:29:08.634671: 6. clickhouse-server(DB::MergeTreeReader::readRows(unsigned long, bool, unsigned long, DB::Block&)+0x2f3) [0x6374703]
2019-07-10 16:29:08.634671: 7. clickhouse-server(DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)+0x13e) [0x63702ee]
2019-07-10 16:29:08.634671: 8. clickhouse-server(DB::MergeTreeRangeReader::startReadingChain(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x19f) [0x6370fff]
2019-07-10 16:29:08.634671: 9. clickhouse-server(DB::MergeTreeRangeReader::read(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x622) [0x6372792]
2019-07-10 16:29:08.634671: 10. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readFromPart()+0x7d0) [0x6363c00]
2019-07-10 16:29:08.634671: 11. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readImpl()+0xa3) [0x6365113]
2019-07-10 16:29:08.634671: 12. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 16:29:08.634671: 13. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x61ae2ba]
2019-07-10 16:29:08.634671: 14. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 16:29:08.634671: 15. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x2b5) [0x61da335]
2019-07-10 16:29:08.634671: 16. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:29:08.634671: 17. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:29:08.634671: 18. clickhouse-server() [0x71eee5f]
2019-07-10 16:29:08.634671: 19. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:29:08.634671: 20. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:29:08.634671: 
2019-07-10 16:29:13.642344: Continuing after exception
2019-07-10 16:29:13.654334: Thread 139936630900480 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:29:16.854035: Thread 139936639354624 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 16:29:45.536045: Thread 139936327468800 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:29:48.401166: Iteration 9: 52.28
2019-07-10 16:30:59.649341: Thread 139936639354624 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 16:31:34.383250: Iteration 10: 52.99
2019-07-10 16:31:34.384467: 
2019-07-10 16:31:34.384482: Results for 1000000 records averaged over 11 repetitions:
2019-07-10 16:31:34.384973: Actual rows fetched: 1000000
2019-07-10 16:31:34.385345: Time to execute select: 44.05 seconds
2019-07-10 16:31:34.385495: Time to put into dataframe: 8.12 seconds
2019-07-10 16:31:34.385618: Total time: 52.17 seconds
2019-07-10 16:31:34.385782: 
2019-07-10 16:31:34.385793: Current Query: SELECT visitParamExtractInt(Message, 'partitionhash') AS partitionhash, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'hashcode') AS hashcode, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'accountnumber') AS accountnumber, 
2019-07-10 16:31:34.385793: visitParamExtractInt(Message, 'airtimeclass') AS airtimeclass, 
2019-07-10 16:31:34.385793: visitParamExtractFloat(Message, 'airtimeunits') AS airtimeunits, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'allocationcompletedate') AS allocationcompletedate, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'apn') AS apn, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'callednumber') AS callednumber, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'callingnumber') AS callingnumber, 
2019-07-10 16:31:34.385793: visitParamExtractInt(Message, 'carrierid') AS carrierid, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'cellid') AS cellid, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'chargingid') AS chargingid, 
2019-07-10 16:31:34.385793: visitParamExtractInt(Message, 'costcenterid') AS costcenterid, 
2019-07-10 16:31:34.385793: visitParamExtractInt(Message, 'downlinkvol') AS downlinkvol, 
2019-07-10 16:31:34.385793: visitParamExtractFloat(Message, 'duration') AS duration, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'exactusagedateonly') AS exactusagedateonly, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'exactusagetime') AS exactusagetime, 
2019-07-10 16:31:34.385793: visitParamExtractInt(Message, 'fileid') AS fileid, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'iccid') AS iccid, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'imei') AS imei, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'imsi') AS imsi, 
2019-07-10 16:31:34.385793: visitParamExtractInt(Message, 'lineid') AS lineid, 
2019-07-10 16:31:34.385793: visitParamExtractInt(Message, 'linenumber') AS linenumber, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'mobilecountrycode') AS mobilecountrycode, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'mobilenetworkcode') AS mobilenetworkcode, 
2019-07-10 16:31:34.385793: visitParamExtractBool(Message, 'mobileoriginated') AS mobileoriginated, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'msisdn') AS msisdn, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'network') AS network, 
2019-07-10 16:31:34.385793: visitParamExtractInt(Message, 'orgid') AS orgid, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'orgurn') AS orgurn, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'plmn') AS plmn, 
2019-07-10 16:31:34.385793: visitParamExtractRaw(Message, 'propertybag') AS propertybag, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'recordtype') AS recordtype, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'roamingindicator') AS roamingindicator, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'roundingdate') AS roundingdate, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'sender') AS sender, 
2019-07-10 16:31:34.385793: visitParamExtractInt(Message, 'subscriptionid') AS subscriptionid, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'subscriptionurn') AS subscriptionurn, 
2019-07-10 16:31:34.385793: visitParamExtractInt(Message, 'surrecordtypeid') AS surrecordtypeid, 
2019-07-10 16:31:34.385793: visitParamExtractString(Message, 'tapcode') AS tapcode, 
2019-07-10 16:31:34.385793: visitParamExtractInt(Message, 'uplinkvol') AS uplinkvol, 
2019-07-10 16:31:34.385793: visitParamExtractInt(Message, 'usagetypeid') AS usagetypeid 
2019-07-10 16:31:34.385793: FROM radius.udr 
2019-07-10 16:31:34.385793: WHERE partitionhash = -1 
2019-07-10 16:31:34.385793: LIMIT 
2019-07-10 16:32:09.045221: Thread 139936588891904 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:32:16.710313: Thread 139936588891904 encountered an exception:
2019-07-10 16:32:16.711427: Code: 241.
2019-07-10 16:32:16.711486: DB::Exception: Memory limit (for query) exceeded: would use 9.43 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:32:16.711486: 
2019-07-10 16:32:16.711486: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:32:16.711486: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:32:16.711486: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:32:16.711486: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 16:32:16.711486: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 16:32:16.711486: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 16:32:16.711486: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 16:32:16.711486: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:32:16.711486: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:32:16.711486: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:32:16.711486: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:32:16.711486: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:32:16.711486: 12. clickhouse-server() [0x71eee5f]
2019-07-10 16:32:16.711486: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:32:16.711486: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:32:16.711486: 
2019-07-10 16:32:21.728774: Continuing after exception
2019-07-10 16:32:21.730082: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 16:32:28.978693: Thread 139936327468800 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 16:32:28.981026: Iteration 0: 3.59
2019-07-10 16:32:37.475199: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:32:48.215869: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 16:33:13.843515: Thread 139936327468800 encountered an exception:
2019-07-10 16:33:13.843902: Code: 241.
2019-07-10 16:33:13.843926: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 128 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:33:13.843926: 
2019-07-10 16:33:13.843926: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:33:13.843926: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:33:13.843926: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:33:13.843926: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 16:33:13.843926: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 16:33:13.843926: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 16:33:13.843926: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:33:13.843926: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:33:13.843926: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:33:13.843926: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:33:13.843926: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:33:13.843926: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:33:13.843926: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:33:13.843926: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:33:13.843926: 
2019-07-10 16:33:18.846490: Continuing after exception
2019-07-10 16:33:18.847112: Thread 139936327468800 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 16:33:21.865252: Iteration 1: 1.88
2019-07-10 16:34:03.617799: Thread 139936588891904 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 16:34:13.035036: Thread 139936639354624 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:34:14.842282: Thread 139936630900480 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 16:34:20.189916: Thread 139936639354624 encountered an exception:
2019-07-10 16:34:20.190572: Code: 241.
2019-07-10 16:34:20.190611: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:34:20.190611: 
2019-07-10 16:34:20.190611: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:34:20.190611: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:34:20.190611: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:34:20.190611: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 16:34:20.190611: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 16:34:20.190611: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 16:34:20.190611: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:34:20.190611: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:34:20.190611: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:34:20.190611: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:34:20.190611: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:34:20.190611: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:34:20.190611: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:34:20.190611: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:34:20.190611: 
2019-07-10 16:34:21.112305: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:34:23.557612: Iteration 2: 1.69
2019-07-10 16:34:25.195237: Continuing after exception
2019-07-10 16:34:25.196782: Thread 139936639354624 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 16:35:11.129702: Thread 139936639354624 encountered an exception:
2019-07-10 16:35:11.130314: Code: 241.
2019-07-10 16:35:11.130345: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 65536 bytes), maximum: 9.31 GiB: (while reading column protocolname): (while reading from part /ClikHausData/data_root/data/netflow/netflow_raw/201901_4645169_4721667_232/ from mark 11620 with max_rows_to_read = 5000). Stack trace:
2019-07-10 16:35:11.130345: 
2019-07-10 16:35:11.130345: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:35:11.130345: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:35:11.130345: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:35:11.130345: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 16:35:11.130345: 4. clickhouse-server(DB::DataTypeString::deserializeBinaryBulk(DB::IColumn&, DB::ReadBuffer&, unsigned long, double) const+0x2ed) [0x5cdfa9d]
2019-07-10 16:35:11.130345: 5. clickhouse-server(DB::MergeTreeReader::readData(std::string const&, DB::IDataType const&, DB::IColumn&, unsigned long, bool, unsigned long, bool)+0x2ea) [0x637406a]
2019-07-10 16:35:11.130345: 6. clickhouse-server(DB::MergeTreeReader::readRows(unsigned long, bool, unsigned long, DB::Block&)+0x2f3) [0x6374703]
2019-07-10 16:35:11.130345: 7. clickhouse-server(DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)+0x13e) [0x63702ee]
2019-07-10 16:35:11.130345: 8. clickhouse-server(DB::MergeTreeRangeReader::startReadingChain(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x19f) [0x6370fff]
2019-07-10 16:35:11.130345: 9. clickhouse-server(DB::MergeTreeRangeReader::read(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x622) [0x6372792]
2019-07-10 16:35:11.130345: 10. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readFromPart()+0x7d0) [0x6363c00]
2019-07-10 16:35:11.130345: 11. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readImpl()+0xa3) [0x6365113]
2019-07-10 16:35:11.130345: 12. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 16:35:11.130345: 13. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x61ae2ba]
2019-07-10 16:35:11.130345: 14. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 16:35:11.130345: 15. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x2b5) [0x61da335]
2019-07-10 16:35:11.130345: 16. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:35:11.130345: 17. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:35:11.130345: 18. clickhouse-server() [0x71eee5f]
2019-07-10 16:35:11.130345: 19. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:35:11.130345: 20. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:35:11.130345: 
2019-07-10 16:35:16.136397: Continuing after exception
2019-07-10 16:35:16.136832: Thread 139936639354624 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:35:24.209419: Thread 139936639354624 encountered an exception:
2019-07-10 16:35:24.210586: Code: 241.
2019-07-10 16:35:24.210636: DB::Exception: Memory limit (for query) exceeded: would use 9.39 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:35:24.210636: 
2019-07-10 16:35:24.210636: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:35:24.210636: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:35:24.210636: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:35:24.210636: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 16:35:24.210636: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 16:35:24.210636: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 16:35:24.210636: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 16:35:24.210636: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:35:24.210636: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:35:24.210636: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:35:24.210636: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:35:24.210636: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:35:24.210636: 12. clickhouse-server() [0x71eee5f]
2019-07-10 16:35:24.210636: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:35:24.210636: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:35:24.210636: 
2019-07-10 16:35:24.547636: Iteration 3: 1.99
2019-07-10 16:35:25.283753: Thread 139936630900480 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:35:27.959132: Thread 139936588891904 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:35:29.220185: Continuing after exception
2019-07-10 16:35:29.221397: Thread 139936639354624 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 16:36:23.640994: Iteration 4: 2.10
2019-07-10 16:36:56.185604: Thread 139936639354624 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 16:37:03.437452: Thread 139936588891904 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:37:22.472694: Iteration 5: 1.83
2019-07-10 16:37:53.333832: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 16:38:22.398838: Iteration 6: 1.93
2019-07-10 16:38:38.010287: Thread 139936639354624 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 16:39:01.929911: Thread 139936630900480 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:39:09.873221: Thread 139936630900480 encountered an exception:
2019-07-10 16:39:09.873700: Code: 241.
2019-07-10 16:39:09.873720: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:39:09.873720: 
2019-07-10 16:39:09.873720: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:39:09.873720: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:39:09.873720: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:39:09.873720: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 16:39:09.873720: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 16:39:09.873720: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 16:39:09.873720: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:39:09.873720: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:39:09.873720: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:39:09.873720: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:39:09.873720: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:39:09.873720: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:39:09.873720: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:39:09.873720: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:39:09.873720: 
2019-07-10 16:39:14.878081: Continuing after exception
2019-07-10 16:39:14.879304: Thread 139936630900480 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 16:39:21.264448: Iteration 7: 1.87
2019-07-10 16:39:25.922155: Thread 139936639354624 encountered an exception:
2019-07-10 16:39:25.923012: Code: 241.
2019-07-10 16:39:25.923056: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 4096 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:39:25.923056: 
2019-07-10 16:39:25.923056: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:39:25.923056: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:39:25.923056: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:39:25.923056: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 16:39:25.923056: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 16:39:25.923056: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 16:39:25.923056: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:39:25.923056: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:39:25.923056: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:39:25.923056: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:39:25.923056: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:39:25.923056: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:39:25.923056: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:39:25.923056: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:39:25.923056: 
2019-07-10 16:39:30.018784: Thread 139936327468800 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:39:30.932132: Continuing after exception
2019-07-10 16:39:30.932783: Thread 139936639354624 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:39:38.857189: Thread 139936639354624 encountered an exception:
2019-07-10 16:39:38.858344: Code: 241.
2019-07-10 16:39:38.858393: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:39:38.858393: 
2019-07-10 16:39:38.858393: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:39:38.858393: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:39:38.858393: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:39:38.858393: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 16:39:38.858393: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 16:39:38.858393: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 16:39:38.858393: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:39:38.858393: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:39:38.858393: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:39:38.858393: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:39:38.858393: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:39:38.858393: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:39:38.858393: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:39:38.858393: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:39:38.858393: 
2019-07-10 16:39:43.868567: Continuing after exception
2019-07-10 16:39:43.869823: Thread 139936639354624 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 16:40:20.220701: Iteration 8: 1.96
2019-07-10 16:40:34.767167: Thread 139936588891904 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 16:40:52.576471: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:41:06.151552: Thread 139936327468800 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:41:12.334367: Thread 139936639354624 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:41:18.109582: Iteration 9: 1.89
2019-07-10 16:41:46.607769: Thread 139936588891904 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:42:20.966163: Iteration 10: 1.86
2019-07-10 16:42:20.966899: 
2019-07-10 16:42:20.966921: Results for 5 records averaged over 11 repetitions:
2019-07-10 16:42:20.967799: Actual rows fetched: 0
2019-07-10 16:42:20.968096: Time to execute select: 1.91 seconds
2019-07-10 16:42:20.968627: Time to put into dataframe: 0.14 seconds
2019-07-10 16:42:20.968936: Total time: 2.05 seconds
2019-07-10 16:42:20.969402: 
2019-07-10 16:42:20.969415: Current Query: SELECT visitParamExtractInt(Message, 'partitionhash') AS partitionhash, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'hashcode') AS hashcode, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'accountnumber') AS accountnumber, 
2019-07-10 16:42:20.969415: visitParamExtractInt(Message, 'airtimeclass') AS airtimeclass, 
2019-07-10 16:42:20.969415: visitParamExtractFloat(Message, 'airtimeunits') AS airtimeunits, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'allocationcompletedate') AS allocationcompletedate, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'apn') AS apn, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'callednumber') AS callednumber, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'callingnumber') AS callingnumber, 
2019-07-10 16:42:20.969415: visitParamExtractInt(Message, 'carrierid') AS carrierid, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'cellid') AS cellid, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'chargingid') AS chargingid, 
2019-07-10 16:42:20.969415: visitParamExtractInt(Message, 'costcenterid') AS costcenterid, 
2019-07-10 16:42:20.969415: visitParamExtractInt(Message, 'downlinkvol') AS downlinkvol, 
2019-07-10 16:42:20.969415: visitParamExtractFloat(Message, 'duration') AS duration, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'exactusagedateonly') AS exactusagedateonly, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'exactusagetime') AS exactusagetime, 
2019-07-10 16:42:20.969415: visitParamExtractInt(Message, 'fileid') AS fileid, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'iccid') AS iccid, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'imei') AS imei, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'imsi') AS imsi, 
2019-07-10 16:42:20.969415: visitParamExtractInt(Message, 'lineid') AS lineid, 
2019-07-10 16:42:20.969415: visitParamExtractInt(Message, 'linenumber') AS linenumber, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'mobilecountrycode') AS mobilecountrycode, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'mobilenetworkcode') AS mobilenetworkcode, 
2019-07-10 16:42:20.969415: visitParamExtractBool(Message, 'mobileoriginated') AS mobileoriginated, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'msisdn') AS msisdn, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'network') AS network, 
2019-07-10 16:42:20.969415: visitParamExtractInt(Message, 'orgid') AS orgid, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'orgurn') AS orgurn, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'plmn') AS plmn, 
2019-07-10 16:42:20.969415: visitParamExtractRaw(Message, 'propertybag') AS propertybag, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'recordtype') AS recordtype, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'roamingindicator') AS roamingindicator, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'roundingdate') AS roundingdate, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'sender') AS sender, 
2019-07-10 16:42:20.969415: visitParamExtractInt(Message, 'subscriptionid') AS subscriptionid, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'subscriptionurn') AS subscriptionurn, 
2019-07-10 16:42:20.969415: visitParamExtractInt(Message, 'surrecordtypeid') AS surrecordtypeid, 
2019-07-10 16:42:20.969415: visitParamExtractString(Message, 'tapcode') AS tapcode, 
2019-07-10 16:42:20.969415: visitParamExtractInt(Message, 'uplinkvol') AS uplinkvol, 
2019-07-10 16:42:20.969415: visitParamExtractInt(Message, 'usagetypeid') AS usagetypeid 
2019-07-10 16:42:20.969415: FROM radius.udr 
2019-07-10 16:42:20.969415: WHERE carrierid = 18000 
2019-07-10 16:42:20.969415: LIMIT 
2019-07-10 16:42:29.908654: Thread 139936630900480 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:43:16.098865: Iteration 0: 0.13
2019-07-10 16:43:22.969901: Thread 139936588891904 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:43:48.755232: Thread 139936327468800 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 16:43:58.145871: Thread 139936639354624 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 16:44:13.252744: Iteration 1: 0.15
2019-07-10 16:44:44.624829: Thread 139936639354624 encountered an exception:
2019-07-10 16:44:44.625354: Code: 241.
2019-07-10 16:44:44.625386: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 65536 bytes), maximum: 9.31 GiB: (while reading column protocolname): (while reading from part /ClikHausData/data_root/data/netflow/netflow_raw/201901_4645169_4721667_232/ from mark 30071 with max_rows_to_read = 5000). Stack trace:
2019-07-10 16:44:44.625386: 
2019-07-10 16:44:44.625386: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:44:44.625386: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:44:44.625386: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:44:44.625386: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 16:44:44.625386: 4. clickhouse-server(DB::DataTypeString::deserializeBinaryBulk(DB::IColumn&, DB::ReadBuffer&, unsigned long, double) const+0x2ed) [0x5cdfa9d]
2019-07-10 16:44:44.625386: 5. clickhouse-server(DB::MergeTreeReader::readData(std::string const&, DB::IDataType const&, DB::IColumn&, unsigned long, bool, unsigned long, bool)+0x2ea) [0x637406a]
2019-07-10 16:44:44.625386: 6. clickhouse-server(DB::MergeTreeReader::readRows(unsigned long, bool, unsigned long, DB::Block&)+0x2f3) [0x6374703]
2019-07-10 16:44:44.625386: 7. clickhouse-server(DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)+0x13e) [0x63702ee]
2019-07-10 16:44:44.625386: 8. clickhouse-server(DB::MergeTreeRangeReader::startReadingChain(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x19f) [0x6370fff]
2019-07-10 16:44:44.625386: 9. clickhouse-server(DB::MergeTreeRangeReader::read(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x622) [0x6372792]
2019-07-10 16:44:44.625386: 10. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readFromPart()+0x7d0) [0x6363c00]
2019-07-10 16:44:44.625386: 11. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readImpl()+0xa3) [0x6365113]
2019-07-10 16:44:44.625386: 12. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 16:44:44.625386: 13. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x61ae2ba]
2019-07-10 16:44:44.625386: 14. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 16:44:44.625386: 15. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x2b5) [0x61da335]
2019-07-10 16:44:44.625386: 16. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:44:44.625386: 17. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:44:44.625386: 18. clickhouse-server() [0x71eee5f]
2019-07-10 16:44:44.625386: 19. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:44:44.625386: 20. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:44:44.625386: 
2019-07-10 16:44:49.630355: Continuing after exception
2019-07-10 16:44:49.630998: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:45:09.404428: Iteration 2: 0.15
2019-07-10 16:45:29.551333: Thread 139936327468800 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:45:37.385495: Thread 139936327468800 encountered an exception:
2019-07-10 16:45:37.385953: Code: 241.
2019-07-10 16:45:37.385986: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:45:37.385986: 
2019-07-10 16:45:37.385986: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:45:37.385986: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:45:37.385986: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:45:37.385986: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 16:45:37.385986: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 16:45:37.385986: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 16:45:37.385986: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:45:37.385986: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:45:37.385986: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:45:37.385986: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:45:37.385986: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:45:37.385986: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:45:37.385986: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:45:37.385986: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:45:37.385986: 
2019-07-10 16:45:42.391129: Continuing after exception
2019-07-10 16:45:42.391707: Thread 139936327468800 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:46:01.289310: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 16:46:01.659067: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 16:46:09.532428: Iteration 3: 0.13
2019-07-10 16:47:01.667064: Iteration 4: 0.14
2019-07-10 16:47:30.679405: Thread 139936630900480 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:47:38.088768: Thread 139936630900480 encountered an exception:
2019-07-10 16:47:38.089995: Code: 241.
2019-07-10 16:47:38.090056: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:47:38.090056: 
2019-07-10 16:47:38.090056: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:47:38.090056: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:47:38.090056: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:47:38.090056: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 16:47:38.090056: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 16:47:38.090056: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 16:47:38.090056: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:47:38.090056: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:47:38.090056: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:47:38.090056: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:47:38.090056: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:47:38.090056: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:47:38.090056: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:47:38.090056: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:47:38.090056: 
2019-07-10 16:47:42.306567: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 16:47:43.109040: Continuing after exception
2019-07-10 16:47:43.110322: Thread 139936630900480 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:48:02.776896: Iteration 5: 0.11
2019-07-10 16:48:21.469128: Thread 139936327468800 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 16:48:24.267518: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:48:28.314848: Thread 139936588891904 encountered an exception:
2019-07-10 16:48:28.315301: Code: 241.
2019-07-10 16:48:28.315320: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 128 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:48:28.315320: 
2019-07-10 16:48:28.315320: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:48:28.315320: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:48:28.315320: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:48:28.315320: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 16:48:28.315320: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x1e7) [0x5944827]
2019-07-10 16:48:28.315320: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 16:48:28.315320: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:48:28.315320: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:48:28.315320: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:48:28.315320: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:48:28.315320: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:48:28.315320: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:48:28.315320: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:48:28.315320: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:48:28.315320: 
2019-07-10 16:48:33.318396: Continuing after exception
2019-07-10 16:48:33.319186: Thread 139936588891904 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 16:48:54.936539: Iteration 6: 0.16
2019-07-10 16:49:22.108922: Thread 139936327468800 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:49:29.591873: Thread 139936327468800 encountered an exception:
2019-07-10 16:49:29.592377: Code: 241.
2019-07-10 16:49:29.592398: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:49:29.592398: 
2019-07-10 16:49:29.592398: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:49:29.592398: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:49:29.592398: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:49:29.592398: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 16:49:29.592398: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 16:49:29.592398: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 16:49:29.592398: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:49:29.592398: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:49:29.592398: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:49:29.592398: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:49:29.592398: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:49:29.592398: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:49:29.592398: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:49:29.592398: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:49:29.592398: 
2019-07-10 16:49:34.595669: Continuing after exception
2019-07-10 16:49:34.596400: Thread 139936327468800 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 16:49:48.081133: Iteration 7: 0.15
2019-07-10 16:49:58.464038: Thread 139936639354624 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 16:49:59.975071: Thread 139936588891904 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:50:43.219422: Iteration 8: 0.14
2019-07-10 16:50:43.867284: Thread 139936639354624 encountered an exception:
2019-07-10 16:50:43.867786: Code: 241.
2019-07-10 16:50:43.867805: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 32768 bytes), maximum: 9.31 GiB: (avg_value_size_hint = 13, avg_chars_size = 6, limit = 5000): (while reading column protocolname): (while reading from part /ClikHausData/data_root/data/netflow/netflow_raw/201812_1_4602465_734/ from mark 12580 with max_rows_to_read = 5000). Stack trace:
2019-07-10 16:50:43.867805: 
2019-07-10 16:50:43.867805: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:50:43.867805: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:50:43.867805: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:50:43.867805: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 16:50:43.867805: 4. clickhouse-server() [0x5cd9945]
2019-07-10 16:50:43.867805: 5. clickhouse-server(DB::DataTypeString::deserializeBinaryBulk(DB::IColumn&, DB::ReadBuffer&, unsigned long, double) const+0x2d0) [0x5cdfa80]
2019-07-10 16:50:43.867805: 6. clickhouse-server(DB::MergeTreeReader::readData(std::string const&, DB::IDataType const&, DB::IColumn&, unsigned long, bool, unsigned long, bool)+0x2ea) [0x637406a]
2019-07-10 16:50:43.867805: 7. clickhouse-server(DB::MergeTreeReader::readRows(unsigned long, bool, unsigned long, DB::Block&)+0x2f3) [0x6374703]
2019-07-10 16:50:43.867805: 8. clickhouse-server(DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)+0x13e) [0x63702ee]
2019-07-10 16:50:43.867805: 9. clickhouse-server(DB::MergeTreeRangeReader::startReadingChain(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x19f) [0x6370fff]
2019-07-10 16:50:43.867805: 10. clickhouse-server(DB::MergeTreeRangeReader::read(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x622) [0x6372792]
2019-07-10 16:50:43.867805: 11. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readFromPart()+0x7d0) [0x6363c00]
2019-07-10 16:50:43.867805: 12. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readImpl()+0xa3) [0x6365113]
2019-07-10 16:50:43.867805: 13. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 16:50:43.867805: 14. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x61ae2ba]
2019-07-10 16:50:43.867805: 15. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 16:50:43.867805: 16. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x2b5) [0x61da335]
2019-07-10 16:50:43.867805: 17. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:50:43.867805: 18. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:50:43.867805: 19. clickhouse-server() [0x71eee5f]
2019-07-10 16:50:43.867805: 20. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:50:43.867805: 21. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:50:43.867805: 
2019-07-10 16:50:48.871835: Continuing after exception
2019-07-10 16:50:48.872499: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:51:16.266715: Thread 139936630900480 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:51:17.597094: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 16:51:37.306314: Iteration 9: 0.09
2019-07-10 16:52:24.550306: Thread 139936639354624 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:52:36.439051: Iteration 10: 0.13
2019-07-10 16:52:36.439426: 
2019-07-10 16:52:36.439434: Results for 5 records averaged over 11 repetitions:
2019-07-10 16:52:36.440613: Actual rows fetched: 5
2019-07-10 16:52:36.441027: Time to execute select: 0.12 seconds
2019-07-10 16:52:36.441335: Time to put into dataframe: 0.01 seconds
2019-07-10 16:52:36.441743: Total time: 0.13 seconds
2019-07-10 16:52:58.428796: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:53:32.560859: Iteration 0: 0.12
2019-07-10 16:53:35.463433: Thread 139936588891904 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:53:57.672336: Thread 139936630900480 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 16:54:31.695438: Iteration 1: 0.14
2019-07-10 16:55:06.570510: Thread 139936639354624 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 16:55:30.856291: Iteration 2: 0.16
2019-07-10 16:56:08.360612: Thread 139936639354624 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:56:16.087661: Thread 139936639354624 encountered an exception:
2019-07-10 16:56:16.088234: Code: 241.
2019-07-10 16:56:16.088283: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:56:16.088283: 
2019-07-10 16:56:16.088283: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:56:16.088283: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:56:16.088283: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:56:16.088283: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 16:56:16.088283: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 16:56:16.088283: 5. clickhouse-server(DB::ColumnVector<int>::serializeValueIntoArena(unsigned long, DB::Arena&, char const*&) const+0x6d) [0x5ed0e1d]
2019-07-10 16:56:16.088283: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x88) [0x627a2e8]
2019-07-10 16:56:16.088283: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:56:16.088283: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:56:16.088283: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:56:16.088283: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:56:16.088283: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:56:16.088283: 12. clickhouse-server() [0x71eee5f]
2019-07-10 16:56:16.088283: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:56:16.088283: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:56:16.088283: 
2019-07-10 16:56:21.095726: Continuing after exception
2019-07-10 16:56:21.096313: Thread 139936639354624 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 16:56:25.088576: Iteration 3: 0.23
2019-07-10 16:56:33.393851: Thread 139936327468800 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 16:56:40.771350: Thread 139936630900480 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 16:57:10.081316: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 16:57:24.235695: Iteration 4: 0.15
2019-07-10 16:57:42.348893: Thread 139936630900480 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 16:57:43.857316: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 16:57:49.955795: Thread 139936630900480 encountered an exception:
2019-07-10 16:57:49.956240: Code: 241.
2019-07-10 16:57:49.956257: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:57:49.956257: 
2019-07-10 16:57:49.956257: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:57:49.956257: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:57:49.956257: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:57:49.956257: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 16:57:49.956257: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 16:57:49.956257: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 16:57:49.956257: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:57:49.956257: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:57:49.956257: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:57:49.956257: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:57:49.956257: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:57:49.956257: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:57:49.956257: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:57:49.956257: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:57:49.956257: 
2019-07-10 16:57:54.107599: Thread 139936588891904 encountered an exception:
2019-07-10 16:57:54.109141: Code: 241.
2019-07-10 16:57:54.109239: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 512 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 16:57:54.109239: 
2019-07-10 16:57:54.109239: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 16:57:54.109239: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 16:57:54.109239: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 16:57:54.109239: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 16:57:54.109239: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 16:57:54.109239: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 16:57:54.109239: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 16:57:54.109239: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 16:57:54.109239: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 16:57:54.109239: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 16:57:54.109239: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 16:57:54.109239: 11. clickhouse-server() [0x71eee5f]
2019-07-10 16:57:54.109239: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 16:57:54.109239: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 16:57:54.109239: 
2019-07-10 16:57:54.958507: Continuing after exception
2019-07-10 16:57:54.963102: Thread 139936630900480 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 16:57:54.974799: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:57:59.131742: Continuing after exception
2019-07-10 16:57:59.133069: Thread 139936588891904 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 16:58:17.387459: Iteration 5: 0.15
2019-07-10 16:59:05.512915: Thread 139936630900480 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 16:59:11.385484: Iteration 6: 1.00
2019-07-10 16:59:18.943826: Thread 139936327468800 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 17:00:05.534383: Iteration 7: 0.15
2019-07-10 17:00:08.586135: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 17:00:46.675140: Thread 139936327468800 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 17:00:59.676999: Iteration 8: 0.14
2019-07-10 17:01:29.135294: Thread 139936639354624 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 17:01:35.669391: Thread 139936588891904 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 17:01:36.588840: Thread 139936630900480 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 17:01:43.833695: Thread 139936630900480 encountered an exception:
2019-07-10 17:01:43.834833: Code: 241.
2019-07-10 17:01:43.834885: DB::Exception: Memory limit (for query) exceeded: would use 9.34 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 17:01:43.834885: 
2019-07-10 17:01:43.834885: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 17:01:43.834885: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 17:01:43.834885: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 17:01:43.834885: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 17:01:43.834885: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 17:01:43.834885: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 17:01:43.834885: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 17:01:43.834885: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 17:01:43.834885: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 17:01:43.834885: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 17:01:43.834885: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 17:01:43.834885: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 17:01:43.834885: 12. clickhouse-server() [0x71eee5f]
2019-07-10 17:01:43.834885: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 17:01:43.834885: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 17:01:43.834885: 
2019-07-10 17:01:48.854968: Continuing after exception
2019-07-10 17:01:48.856273: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 17:01:56.763646: Iteration 9: 0.09
2019-07-10 17:02:36.803047: Thread 139936588891904 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 17:02:47.971041: Iteration 10: 0.21
2019-07-10 17:02:47.971978: 
2019-07-10 17:02:47.971995: Results for 10 records averaged over 11 repetitions:
2019-07-10 17:02:47.972991: Actual rows fetched: 10
2019-07-10 17:02:47.973520: Time to execute select: 0.22 seconds
2019-07-10 17:02:47.974064: Time to put into dataframe: 0.01 seconds
2019-07-10 17:02:47.974601: Total time: 0.23 seconds
2019-07-10 17:03:07.047484: Thread 139936639354624 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 17:03:25.736931: Thread 139936630900480 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 17:03:29.022165: Thread 139936327468800 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 17:03:40.042286: Iteration 0: 0.07
2019-07-10 17:04:17.860014: Thread 139936588891904 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 17:04:32.063275: Thread 139936327468800 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 17:04:37.236026: Iteration 1: 0.19
2019-07-10 17:04:47.465497: Thread 139936639354624 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 17:05:05.069270: Thread 139936630900480 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 17:05:29.296705: Iteration 2: 0.06
2019-07-10 17:05:31.753746: Thread 139936639354624 encountered an exception:
2019-07-10 17:05:31.754908: Code: 241.
2019-07-10 17:05:31.754960: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 512 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 17:05:31.754960: 
2019-07-10 17:05:31.754960: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 17:05:31.754960: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 17:05:31.754960: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 17:05:31.754960: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 17:05:31.754960: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 17:05:31.754960: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 17:05:31.754960: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 17:05:31.754960: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 17:05:31.754960: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 17:05:31.754960: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 17:05:31.754960: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 17:05:31.754960: 11. clickhouse-server() [0x71eee5f]
2019-07-10 17:05:31.754960: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 17:05:31.754960: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 17:05:31.754960: 
2019-07-10 17:05:36.774571: Continuing after exception
2019-07-10 17:05:36.776399: Thread 139936639354624 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 17:05:42.199533: Thread 139936327468800 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 17:05:53.368603: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 17:06:15.621932: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 17:06:26.477047: Iteration 3: 0.18
2019-07-10 17:06:44.307560: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 17:06:48.900587: Thread 139936639354624 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 17:07:19.606284: Iteration 4: 0.13
2019-07-10 17:07:32.379049: Thread 139936588891904 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 17:07:44.235082: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 17:08:16.752160: Iteration 5: 0.15
2019-07-10 17:08:28.059812: Thread 139936639354624 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 17:09:10.873953: Iteration 6: 0.12
2019-07-10 17:09:12.720132: Thread 139936630900480 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 17:10:00.989222: Iteration 7: 0.12
2019-07-10 17:10:08.428667: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 17:10:15.003773: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 17:10:20.223176: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 17:10:57.149386: Iteration 8: 0.16
2019-07-10 17:11:49.275712: Iteration 9: 0.13
2019-07-10 17:11:54.918857: Thread 139936588891904 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 17:12:01.656363: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 17:12:45.347309: Iteration 10: 0.07
2019-07-10 17:12:45.348032: 
2019-07-10 17:12:45.348044: Results for 100 records averaged over 11 repetitions:
2019-07-10 17:12:45.348964: Actual rows fetched: 100
2019-07-10 17:12:45.349432: Time to execute select: 0.12 seconds
2019-07-10 17:12:45.349882: Time to put into dataframe: 0.01 seconds
2019-07-10 17:12:45.350271: Total time: 0.13 seconds
2019-07-10 17:12:48.173175: Thread 139936630900480 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 17:13:41.034136: Thread 139936639354624 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 17:13:41.446672: Iteration 0: 0.10
2019-07-10 17:14:29.507122: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 17:14:36.613226: Thread 139936588891904 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 17:14:38.606323: Iteration 1: 0.16
2019-07-10 17:15:08.885176: Thread 139936639354624 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 17:15:31.837120: Iteration 2: 0.23
2019-07-10 17:15:37.444473: Thread 139936327468800 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 17:15:39.117907: Thread 139936588891904 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 17:15:46.702535: Thread 139936588891904 encountered an exception:
2019-07-10 17:15:46.705176: Code: 241.
2019-07-10 17:15:46.705314: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 17:15:46.705314: 
2019-07-10 17:15:46.705314: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 17:15:46.705314: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 17:15:46.705314: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 17:15:46.705314: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 17:15:46.705314: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 17:15:46.705314: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 17:15:46.705314: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 17:15:46.705314: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 17:15:46.705314: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 17:15:46.705314: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 17:15:46.705314: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 17:15:46.705314: 11. clickhouse-server() [0x71eee5f]
2019-07-10 17:15:46.705314: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 17:15:46.705314: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 17:15:46.705314: 
2019-07-10 17:15:51.720317: Continuing after exception
2019-07-10 17:15:51.720804: Thread 139936588891904 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 17:16:03.505565: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 17:16:27.972703: Iteration 3: 0.14
2019-07-10 17:17:16.982357: Thread 139936327468800 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 17:17:20.065779: Iteration 4: 0.09
2019-07-10 17:17:32.077106: Thread 139936630900480 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 17:17:49.005436: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 17:18:18.280216: Iteration 5: 0.21
2019-07-10 17:18:57.107232: Thread 139936327468800 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 17:19:13.368936: Iteration 6: 0.09
2019-07-10 17:19:28.975653: Thread 139936588891904 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 17:19:41.680135: Thread 139936327468800 encountered an exception:
2019-07-10 17:19:41.680863: Code: 241.
2019-07-10 17:19:41.680896: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 256 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 17:19:41.680896: 
2019-07-10 17:19:41.680896: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 17:19:41.680896: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 17:19:41.680896: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 17:19:41.680896: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 17:19:41.680896: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 17:19:41.680896: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 17:19:41.680896: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 17:19:41.680896: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 17:19:41.680896: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 17:19:41.680896: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 17:19:41.680896: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 17:19:41.680896: 11. clickhouse-server() [0x71eee5f]
2019-07-10 17:19:41.680896: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 17:19:41.680896: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 17:19:41.680896: 
2019-07-10 17:19:46.687012: Continuing after exception
2019-07-10 17:19:46.687935: Thread 139936327468800 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 17:19:54.275395: Thread 139936327468800 encountered an exception:
2019-07-10 17:19:54.276725: Code: 241.
2019-07-10 17:19:54.276784: DB::Exception: Memory limit (for query) exceeded: would use 9.36 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 17:19:54.276784: 
2019-07-10 17:19:54.276784: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 17:19:54.276784: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 17:19:54.276784: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 17:19:54.276784: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 17:19:54.276784: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 17:19:54.276784: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 17:19:54.276784: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 17:19:54.276784: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 17:19:54.276784: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 17:19:54.276784: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 17:19:54.276784: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 17:19:54.276784: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 17:19:54.276784: 12. clickhouse-server() [0x71eee5f]
2019-07-10 17:19:54.276784: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 17:19:54.276784: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 17:19:54.276784: 
2019-07-10 17:19:59.298160: Continuing after exception
2019-07-10 17:19:59.299166: Thread 139936327468800 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 17:20:12.704266: Thread 139936630900480 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 17:20:14.516761: Iteration 7: 0.15
2019-07-10 17:20:40.406601: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 17:20:57.801006: Thread 139936630900480 encountered an exception:
2019-07-10 17:20:57.801652: Code: 241.
2019-07-10 17:20:57.801686: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 8192 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 17:20:57.801686: 
2019-07-10 17:20:57.801686: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 17:20:57.801686: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 17:20:57.801686: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 17:20:57.801686: 3. clickhouse-server(Allocator<false>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a3043]
2019-07-10 17:20:57.801686: 4. clickhouse-server(ReservoirSampler<int, (ReservoirSamplerOnEmpty::Enum)1, std::less<int> >::insert(int const&)+0x145) [0x5944785]
2019-07-10 17:20:57.801686: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x1d8) [0x627a438]
2019-07-10 17:20:57.801686: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 17:20:57.801686: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 17:20:57.801686: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 17:20:57.801686: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 17:20:57.801686: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 17:20:57.801686: 11. clickhouse-server() [0x71eee5f]
2019-07-10 17:20:57.801686: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 17:20:57.801686: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 17:20:57.801686: 
2019-07-10 17:21:02.804981: Continuing after exception
2019-07-10 17:21:02.806605: Thread 139936630900480 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 17:21:06.663528: Iteration 8: 0.15
2019-07-10 17:21:22.237391: Thread 139936639354624 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 17:21:35.691852: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 17:22:00.841921: Iteration 9: 0.18
2019-07-10 17:22:18.037861: Thread 139936588891904 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 17:23:00.966378: Iteration 10: 0.13
2019-07-10 17:23:00.966996: 
2019-07-10 17:23:00.967005: Results for 500 records averaged over 11 repetitions:
2019-07-10 17:23:00.967803: Actual rows fetched: 500
2019-07-10 17:23:00.968020: Time to execute select: 0.14 seconds
2019-07-10 17:23:00.968234: Time to put into dataframe: 0.01 seconds
2019-07-10 17:23:00.968641: Total time: 0.15 seconds
2019-07-10 17:23:01.587712: Thread 139936639354624 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 17:24:02.155381: Iteration 0: 0.19
2019-07-10 17:24:38.791826: Thread 139936630900480 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 17:24:43.887416: Thread 139936639354624 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 17:24:51.472214: Thread 139936639354624 encountered an exception:
2019-07-10 17:24:51.473133: Code: 241.
2019-07-10 17:24:51.473166: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 1572864 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 17:24:51.473166: 
2019-07-10 17:24:51.473166: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 17:24:51.473166: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 17:24:51.473166: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 17:24:51.473166: 3. clickhouse-server(Allocator<true>::realloc(void*, unsigned long, unsigned long, unsigned long)+0xb3) [0x66a26d3]
2019-07-10 17:24:51.473166: 4. clickhouse-server(HashTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true> >::resize(unsigned long, unsigned long)+0x74) [0x62790d4]
2019-07-10 17:24:51.473166: 5. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x33c) [0x627a59c]
2019-07-10 17:24:51.473166: 6. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 17:24:51.473166: 7. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 17:24:51.473166: 8. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 17:24:51.473166: 9. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 17:24:51.473166: 10. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 17:24:51.473166: 11. clickhouse-server() [0x71eee5f]
2019-07-10 17:24:51.473166: 12. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 17:24:51.473166: 13. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 17:24:51.473166: 
2019-07-10 17:24:54.312155: Iteration 1: 0.16
2019-07-10 17:24:56.478777: Continuing after exception
2019-07-10 17:24:56.479990: Thread 139936639354624 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 17:25:12.190427: Thread 139936327468800 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 17:25:20.220056: Thread 139936327468800 encountered an exception:
2019-07-10 17:25:20.220769: Code: 241.
2019-07-10 17:25:20.220798: DB::Exception: Memory limit (for query) exceeded: would use 9.42 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 17:25:20.220798: 
2019-07-10 17:25:20.220798: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 17:25:20.220798: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 17:25:20.220798: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 17:25:20.220798: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 17:25:20.220798: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 17:25:20.220798: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 17:25:20.220798: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 17:25:20.220798: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 17:25:20.220798: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 17:25:20.220798: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 17:25:20.220798: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 17:25:20.220798: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 17:25:20.220798: 12. clickhouse-server() [0x71eee5f]
2019-07-10 17:25:20.220798: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 17:25:20.220798: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 17:25:20.220798: 
2019-07-10 17:25:25.225619: Continuing after exception
2019-07-10 17:25:25.226320: Thread 139936327468800 starting background query: select in_bytes,ipv4_next_hop,last_switched,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_bytes,ipv4_next_hop,last_switched order by connections desc limit 50
2019-07-10 17:25:33.847484: Thread 139936327468800 encountered an exception:
2019-07-10 17:25:33.847945: Code: 241.
2019-07-10 17:25:33.847984: DB::Exception: Memory limit (for query) exceeded: would use 9.32 GiB (attempt to allocate chunk of 134217728 bytes), maximum: 9.31 GiB. Stack trace:
2019-07-10 17:25:33.847984: 
2019-07-10 17:25:33.847984: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 17:25:33.847984: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 17:25:33.847984: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 17:25:33.847984: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 17:25:33.847984: 4. clickhouse-server(DB::Arena::addChunk(unsigned long)+0x89) [0x31e4289]
2019-07-10 17:25:33.847984: 5. clickhouse-server(DB::Arena::alignedAlloc(unsigned long, unsigned long)+0x3b) [0x57cf0cb]
2019-07-10 17:25:33.847984: 6. clickhouse-server(void DB::Aggregator::executeImplCase<false, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >::State&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, char*) const+0x29b) [0x627a4fb]
2019-07-10 17:25:33.847984: 7. clickhouse-server(void DB::Aggregator::executeImpl<DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> > >(DB::AggregationMethodSerialized<TwoLevelHashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, TwoLevelHashTableGrower<8ul>, Allocator<true>, HashMapTable> >&, DB::Arena*, unsigned long, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, DB::Aggregator::AggregateFunctionInstruction*, std::vector<StringRef, std::allocator<StringRef> >&, bool, char*) const+0x154) [0x627a804]
2019-07-10 17:25:33.847984: 8. clickhouse-server(DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, std::vector<StringRef, std::allocator<StringRef> >&, bool&)+0x18d7) [0x62264f7]
2019-07-10 17:25:33.847984: 9. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x3ba) [0x61da43a]
2019-07-10 17:25:33.847984: 10. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 17:25:33.847984: 11. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 17:25:33.847984: 12. clickhouse-server() [0x71eee5f]
2019-07-10 17:25:33.847984: 13. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 17:25:33.847984: 14. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 17:25:33.847984: 
2019-07-10 17:25:38.854253: Continuing after exception
2019-07-10 17:25:38.855713: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 17:25:50.274502: Thread 139936588891904 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 17:25:55.457236: Iteration 2: 0.14
2019-07-10 17:26:16.238741: Thread 139936630900480 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 17:26:52.640968: Iteration 3: 0.18
2019-07-10 17:27:17.959646: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 17:27:18.752645: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 17:27:49.803605: Iteration 4: 0.16
2019-07-10 17:28:03.029687: Thread 139936588891904 encountered an exception:
2019-07-10 17:28:03.030905: Code: 241.
2019-07-10 17:28:03.030987: DB::Exception: Memory limit (for query) exceeded: would use 9.31 GiB (attempt to allocate chunk of 65536 bytes), maximum: 9.31 GiB: (while reading column protocolname): (while reading from part /ClikHausData/data_root/data/netflow/netflow_raw/201812_4602466_4648029_9/ from mark 12180 with max_rows_to_read = 5000). Stack trace:
2019-07-10 17:28:03.030987: 
2019-07-10 17:28:03.030987: 0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x66bee66]
2019-07-10 17:28:03.030987: 1. clickhouse-server(MemoryTracker::alloc(long)+0x799) [0x66b7fc9]
2019-07-10 17:28:03.030987: 2. clickhouse-server(MemoryTracker::alloc(long)+0xa8) [0x66b78d8]
2019-07-10 17:28:03.030987: 3. clickhouse-server(Allocator<false>::alloc(unsigned long, unsigned long)+0x22) [0x66a29b2]
2019-07-10 17:28:03.030987: 4. clickhouse-server(DB::DataTypeString::deserializeBinaryBulk(DB::IColumn&, DB::ReadBuffer&, unsigned long, double) const+0x2ed) [0x5cdfa9d]
2019-07-10 17:28:03.030987: 5. clickhouse-server(DB::MergeTreeReader::readData(std::string const&, DB::IDataType const&, DB::IColumn&, unsigned long, bool, unsigned long, bool)+0x2ea) [0x637406a]
2019-07-10 17:28:03.030987: 6. clickhouse-server(DB::MergeTreeReader::readRows(unsigned long, bool, unsigned long, DB::Block&)+0x2f3) [0x6374703]
2019-07-10 17:28:03.030987: 7. clickhouse-server(DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)+0x13e) [0x63702ee]
2019-07-10 17:28:03.030987: 8. clickhouse-server(DB::MergeTreeRangeReader::startReadingChain(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x19f) [0x6370fff]
2019-07-10 17:28:03.030987: 9. clickhouse-server(DB::MergeTreeRangeReader::read(unsigned long, std::vector<DB::MarkRange, std::allocator<DB::MarkRange> >&)+0x622) [0x6372792]
2019-07-10 17:28:03.030987: 10. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readFromPart()+0x7d0) [0x6363c00]
2019-07-10 17:28:03.030987: 11. clickhouse-server(DB::MergeTreeBaseSelectBlockInputStream::readImpl()+0xa3) [0x6365113]
2019-07-10 17:28:03.030987: 12. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 17:28:03.030987: 13. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x1a) [0x61ae2ba]
2019-07-10 17:28:03.030987: 14. clickhouse-server(DB::IBlockInputStream::read()+0x135) [0x5c44675]
2019-07-10 17:28:03.030987: 15. clickhouse-server(DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::shared_ptr<DB::ThreadGroupStatus>, unsigned long)+0x2b5) [0x61da335]
2019-07-10 17:28:03.030987: 16. clickhouse-server(_ZZN20ThreadFromGlobalPoolC4IZN2DB23ParallelInputsProcessorINS1_35ParallelAggregatingBlockInputStream7HandlerEE7processEvEUlvE_JEEEOT_DpOT0_ENKUlvE_clEv+0x5d) [0x61dab7d]
2019-07-10 17:28:03.030987: 17. clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x187) [0x66c4bb7]
2019-07-10 17:28:03.030987: 18. clickhouse-server() [0x71eee5f]
2019-07-10 17:28:03.030987: 19. /lib64/libpthread.so.0(+0x7dd5) [0x7f717e4b6dd5]
2019-07-10 17:28:03.030987: 20. /lib64/libc.so.6(clone+0x6d) [0x7f717d7b8ead]
2019-07-10 17:28:03.030987: 
2019-07-10 17:28:08.053763: Continuing after exception
2019-07-10 17:28:08.055108: Thread 139936588891904 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 17:28:26.902844: Thread 139936639354624 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 17:28:42.260431: Iteration 5: 0.46
2019-07-10 17:28:54.782065: Thread 139936630900480 starting background query: select direction,forwarding_statusstatus,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by direction,forwarding_statusstatus,icmp_type order by connections desc limit 50
2019-07-10 17:29:11.735926: Thread 139936327468800 starting background query: select dst_mask,ipv4_next_hop,in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by dst_mask,ipv4_next_hop,in_dst_mac order by connections desc limit 50
2019-07-10 17:29:19.355650: Thread 139936588891904 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 17:29:29.017913: Thread 139936639354624 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 17:29:41.408336: Iteration 6: 0.15
2019-07-10 17:30:22.960749: Thread 139936630900480 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 17:30:38.678491: Iteration 7: 0.27
2019-07-10 17:30:40.667649: Thread 139936639354624 starting background query: select flowset_id,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by flowset_id order by connections desc limit 50
2019-07-10 17:30:55.380669: Thread 139936588891904 starting background query: select out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac order by connections desc limit 50
2019-07-10 17:31:33.943135: Iteration 8: 0.27
2019-07-10 17:31:35.788930: Thread 139936630900480 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 17:31:42.940864: Thread 139936639354624 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 17:32:34.164837: Iteration 9: 0.22
2019-07-10 17:32:35.090699: Thread 139936588891904 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 17:32:44.486504: Thread 139936327468800 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 17:32:47.461956: Thread 139936630900480 starting background query: select tcp_flags,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags order by connections desc limit 50
2019-07-10 17:33:24.899819: Thread 139936639354624 starting background query: select out_src_mac,tcp_flags,out_src_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by out_src_mac,tcp_flags,out_src_mac order by connections desc limit 50
2019-07-10 17:33:27.362877: Iteration 10: 0.20
2019-07-10 17:33:27.363503: 
2019-07-10 17:33:27.363511: Results for 1000 records averaged over 11 repetitions:
2019-07-10 17:33:27.363964: Actual rows fetched: 1000
2019-07-10 17:33:27.364161: Time to execute select: 0.21 seconds
2019-07-10 17:33:27.364382: Time to put into dataframe: 0.01 seconds
2019-07-10 17:33:27.364610: Total time: 0.22 seconds
2019-07-10 17:33:58.399695: Thread 139936630900480 starting background query: select in_dst_mac,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by in_dst_mac order by connections desc limit 50
2019-07-10 17:34:20.170273: Iteration 0: 0.81
2019-07-10 17:35:16.381920: Thread 139936588891904 starting background query: select protocolname,ipv4_src_addr,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by protocolname,ipv4_src_addr order by connections desc limit 50
2019-07-10 17:35:20.953892: Iteration 1: 0.78
2019-07-10 17:35:25.762181: Thread 139936327468800 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
2019-07-10 17:35:40.305769: Thread 139936630900480 starting background query: select tcp_flags,icmp_type,count(*) as connections,sum(in_pkts),avg(in_pkts),quantiles(.25,.5,.75)(in_pkts),median(in_pkts) from netflow.netflow_raw group by tcp_flags,icmp_type order by connections desc limit 50
